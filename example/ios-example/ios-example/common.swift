// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(DefiWalletCore)
    import DefiWalletCore
#endif

private extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_common_9d78_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_common_9d78_rustbuffer_free(self, $0) }
    }
}

private extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

private extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
private class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset ..< offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        _ = withUnsafeMutableBytes(of: &value) { data.copyBytes(to: $0, from: range) }
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> [UInt8] {
        let range = offset ..< (offset + count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer { buffer in
            data.copyBytes(to: buffer, from: range)
        }
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
private class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        bytes = []
        offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Types conforming to `Serializable` can be read and written in a bytebuffer.
private protocol Serializable {
    func write(into: Writer)
    static func read(from: Reader) throws -> Self
}

// Types confirming to `ViaFfi` can be transferred back-and-for over the FFI.
// This is analogous to the Rust trait of the same name.
private protocol ViaFfi: Serializable {
    associatedtype FfiType
    static func lift(_ v: FfiType) throws -> Self
    func lower() -> FfiType
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
private protocol Primitive {}

private extension Primitive {
    typealias FfiType = Self

    static func lift(_ v: Self) throws -> Self {
        return v
    }

    func lower() -> Self {
        return self
    }
}

// Types conforming to `ViaFfiUsingByteBuffer` lift and lower into a bytebuffer.
// Use this for complex types where it's hard to write a custom lift/lower.
private protocol ViaFfiUsingByteBuffer: Serializable {}

private extension ViaFfiUsingByteBuffer {
    typealias FfiType = RustBuffer

    static func lift(_ buf: FfiType) throws -> Self {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try Self.read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    func lower() -> FfiType {
        let writer = Writer()
        write(into: writer)
        return RustBuffer(bytes: writer.bytes)
    }
}

// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
private enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

private let CALL_SUCCESS: Int8 = 0
private let CALL_ERROR: Int8 = 1
private let CALL_PANIC: Int8 = 2

private extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, E: ViaFfiUsingByteBuffer & Error>(_: E.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: { try E.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
    case CALL_SUCCESS:
        return returnedVal

    case CALL_ERROR:
        throw try errorHandler(callStatus.errorBuf)

    case CALL_PANIC:
        // When the rust code sees a panic, it tries to construct a RustBuffer
        // with the message.  But if that code panics, then it just sends back
        // an empty buffer.
        if callStatus.errorBuf.len > 0 {
            throw UniffiInternalError.rustPanic(try String.lift(callStatus.errorBuf))
        } else {
            callStatus.errorBuf.deallocate()
            throw UniffiInternalError.rustPanic("Rust panic")
        }

    default:
        throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Protocols for converters we'll implement in templates

private protocol FfiConverter {
    associatedtype SwiftType
    associatedtype FfiType

    static func lift(_ ffiValue: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType

    static func read(from: Reader) throws -> SwiftType
    static func write(_ value: SwiftType, into: Writer)
}

private protocol FfiConverterUsingByteBuffer: FfiConverter where FfiType == RustBuffer {
    // Empty, because we want to declare some helper methods in the extension below.
}

extension FfiConverterUsingByteBuffer {
    static func lower(_ value: SwiftType) -> FfiType {
        let writer = Writer()
        Self.write(value, into: writer)
        return RustBuffer(bytes: writer.bytes)
    }

    static func lift(_ buf: FfiType) throws -> SwiftType {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try Self.read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }
}

// Helpers for structural types. Note that because of canonical_names, it /should/ be impossible
// to make another `FfiConverterSequence` etc just using the UDL.
private enum FfiConverterSequence {
    static func write<T>(_ value: [T], into buf: Writer, writeItem: (T, Writer) -> Void) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            writeItem(item, buf)
        }
    }

    static func read<T>(from buf: Reader, readItem: (Reader) throws -> T) throws -> [T] {
        let len: Int32 = try buf.readInt()
        var seq = [T]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try readItem(buf))
        }
        return seq
    }
}

private enum FfiConverterOptional {
    static func write<T>(_ value: T?, into buf: Writer, writeItem: (T, Writer) -> Void) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        writeItem(value, buf)
    }

    static func read<T>(from buf: Reader, readItem: (Reader) throws -> T) throws -> T? {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try readItem(buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

private enum FfiConverterDictionary {
    static func write<T>(_ value: [String: T], into buf: Writer, writeItem: (String, T, Writer) -> Void) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for (key, value) in value {
            writeItem(key, value, buf)
        }
    }

    static func read<T>(from buf: Reader, readItem: (Reader) throws -> (String, T)) throws -> [String: T] {
        let len: Int32 = try buf.readInt()
        var dict = [String: T]()
        dict.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            let (key, value) = try readItem(buf)
            dict[key] = value
        }
        return dict
    }
}

// Public interface members begin here.

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum Network {
    case cryptoOrgMainnet
    case cryptoOrgTestnet
    case cronosMainnet
    case cosmosHub
    case other(chainId: String, coinType: UInt32, bech32hrp: String)
}

extension Network: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Network {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .cryptoOrgMainnet
        case 2: return .cryptoOrgTestnet
        case 3: return .cronosMainnet
        case 4: return .cosmosHub
        case 5: return .other(
                chainId: try String.read(from: buf),
                coinType: try UInt32.read(from: buf),
                bech32hrp: try String.read(from: buf)
            )
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case .cryptoOrgMainnet:
            buf.writeInt(Int32(1))

        case .cryptoOrgTestnet:
            buf.writeInt(Int32(2))

        case .cronosMainnet:
            buf.writeInt(Int32(3))

        case .cosmosHub:
            buf.writeInt(Int32(4))

        case let .other(chainId, coinType, bech32hrp):
            buf.writeInt(Int32(5))
            chainId.write(into: buf)
            coinType.write(into: buf)
            bech32hrp.write(into: buf)
        }
    }
}

extension Network: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum WalletCoin {
    case cosmosSdk(network: Network)
}

extension WalletCoin: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> WalletCoin {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .cosmosSdk(
                network: try Network.read(from: buf)
            )
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case let .cosmosSdk(network):
            buf.writeInt(Int32(1))
            network.write(into: buf)
        }
    }
}

extension WalletCoin: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum SingleCoin {
    case baseCro(amount: UInt64)
    case cro(amount: UInt64, network: Network)
    case testnetBaseCro(amount: UInt64)
    case testnetCro(amount: UInt64)
    case uatom(amount: UInt64)
    case atom(amount: UInt64)
    case other(amount: String, denom: String)
}

extension SingleCoin: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> SingleCoin {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .baseCro(
                amount: try UInt64.read(from: buf)
            )
        case 2: return .cro(
                amount: try UInt64.read(from: buf),
                network: try Network.read(from: buf)
            )
        case 3: return .testnetBaseCro(
                amount: try UInt64.read(from: buf)
            )
        case 4: return .testnetCro(
                amount: try UInt64.read(from: buf)
            )
        case 5: return .uatom(
                amount: try UInt64.read(from: buf)
            )
        case 6: return .atom(
                amount: try UInt64.read(from: buf)
            )
        case 7: return .other(
                amount: try String.read(from: buf),
                denom: try String.read(from: buf)
            )
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case let .baseCro(amount):
            buf.writeInt(Int32(1))
            amount.write(into: buf)

        case let .cro(amount, network):
            buf.writeInt(Int32(2))
            amount.write(into: buf)
            network.write(into: buf)

        case let .testnetBaseCro(amount):
            buf.writeInt(Int32(3))
            amount.write(into: buf)

        case let .testnetCro(amount):
            buf.writeInt(Int32(4))
            amount.write(into: buf)

        case let .uatom(amount):
            buf.writeInt(Int32(5))
            amount.write(into: buf)

        case let .atom(amount):
            buf.writeInt(Int32(6))
            amount.write(into: buf)

        case let .other(amount, denom):
            buf.writeInt(Int32(7))
            amount.write(into: buf)
            denom.write(into: buf)
        }
    }
}

extension SingleCoin: Equatable, Hashable {}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum CosmosSdkMsg {
    case bankSend(recipientAddress: String, amount: SingleCoin)
}

extension CosmosSdkMsg: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> CosmosSdkMsg {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .bankSend(
                recipientAddress: try String.read(from: buf),
                amount: try SingleCoin.read(from: buf)
            )
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case let .bankSend(recipientAddress, amount):
            buf.writeInt(Int32(1))
            recipientAddress.write(into: buf)
            amount.write(into: buf)
        }
    }
}

extension CosmosSdkMsg: Equatable, Hashable {}

public func getSingleMsgSignPayload(txInfo: CosmosSdkTxInfo, msg: CosmosSdkMsg, senderPubkey: [UInt8]) throws -> [UInt8] {
    let _retval = try

        rustCallWithError(ErrorWrapper.self) {
            common_9d78_get_single_msg_sign_payload(txInfo.lower(), msg.lower(), FfiConverterSequenceUInt8.lower(senderPubkey), $0)
        }
    return try FfiConverterSequenceUInt8.lift(_retval)
}

public func buildSignedSingleMsgTx(txInfo: CosmosSdkTxInfo, msg: CosmosSdkMsg, secretKey: SecretKey) throws -> [UInt8] {
    let _retval = try

        rustCallWithError(ErrorWrapper.self) {
            common_9d78_build_signed_single_msg_tx(txInfo.lower(), msg.lower(), secretKey.lower(), $0)
        }
    return try FfiConverterSequenceUInt8.lift(_retval)
}

public protocol SecretKeyProtocol {}

public class SecretKey: SecretKeyProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init() {
        self.init(unsafeFromRawPointer: try!

            rustCall {
                common_9d78_SecretKey_new($0)
            })
    }

    deinit {
        try! rustCall { ffi_common_9d78_SecretKey_object_free(pointer, $0) }
    }
}

private extension SecretKey {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension SecretKey: ViaFfi, Serializable {}

public protocol HDWalletProtocol {
    func getBackupMnemonicPhrase() -> String?
    func getDefaultAddress(coin: WalletCoin) throws -> String
    func getKey(derivationPath: String) throws -> SecretKey
}

public class HdWallet: HDWalletProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `ViaFfi` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public convenience init(seedVal: [UInt8]) throws {
        self.init(unsafeFromRawPointer: try

            rustCallWithError(HdWrapError.self) {
                common_9d78_HDWallet_new(FfiConverterSequenceUInt8.lower(seedVal), $0)
            })
    }

    deinit {
        try! rustCall { ffi_common_9d78_HDWallet_object_free(pointer, $0) }
    }

    public static func recoverWallet(mnemonicPhrase: String, password: String?) throws -> HdWallet {
        return HdWallet(unsafeFromRawPointer: try

            rustCallWithError(HdWrapError.self) {
                common_9d78_HDWallet_recover_wallet(mnemonicPhrase.lower(), FfiConverterOptionString.lower(password), $0)
            })
    }

    public static func generateWallet(password: String?) -> HdWallet {
        return HdWallet(unsafeFromRawPointer: try!

            rustCall {
                common_9d78_HDWallet_generate_wallet(FfiConverterOptionString.lower(password), $0)
            })
    }

    public func getBackupMnemonicPhrase() -> String? {
        let _retval = try!
            rustCall {
                common_9d78_HDWallet_get_backup_mnemonic_phrase(self.pointer, $0)
            }
        return try! FfiConverterOptionString.lift(_retval)
    }

    public func getDefaultAddress(coin: WalletCoin) throws -> String {
        let _retval = try
            rustCallWithError(HdWrapError.self) {
                common_9d78_HDWallet_get_default_address(self.pointer, coin.lower(), $0)
            }
        return try String.lift(_retval)
    }

    public func getKey(derivationPath: String) throws -> SecretKey {
        let _retval = try
            rustCallWithError(HdWrapError.self) {
                common_9d78_HDWallet_get_key(self.pointer, derivationPath.lower(), $0)
            }
        return try SecretKey.lift(_retval)
    }
}

private extension HdWallet {
    typealias FfiType = UnsafeMutableRawPointer

    static func read(from buf: Reader) throws -> Self {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if ptr == nil {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    func write(into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower()))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Self {
        return Self(unsafeFromRawPointer: pointer)
    }

    func lower() -> UnsafeMutableRawPointer {
        return pointer
    }
}

// Ideally this would be `fileprivate`, but Swift says:
// """
// 'private' modifier cannot be used with extensions that declare protocol conformances
// """
extension HdWallet: ViaFfi, Serializable {}

public struct CosmosSdkTxInfo {
    public var accountNumber: UInt64
    public var sequenceNumber: UInt64
    public var gasLimit: UInt64
    public var feeAmount: SingleCoin
    public var timeoutHeight: UInt32
    public var memoNote: String?
    public var network: Network

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(accountNumber: UInt64, sequenceNumber: UInt64, gasLimit: UInt64, feeAmount: SingleCoin, timeoutHeight: UInt32, memoNote: String?, network: Network) {
        self.accountNumber = accountNumber
        self.sequenceNumber = sequenceNumber
        self.gasLimit = gasLimit
        self.feeAmount = feeAmount
        self.timeoutHeight = timeoutHeight
        self.memoNote = memoNote
        self.network = network
    }
}

extension CosmosSdkTxInfo: Equatable, Hashable {
    public static func == (lhs: CosmosSdkTxInfo, rhs: CosmosSdkTxInfo) -> Bool {
        if lhs.accountNumber != rhs.accountNumber {
            return false
        }
        if lhs.sequenceNumber != rhs.sequenceNumber {
            return false
        }
        if lhs.gasLimit != rhs.gasLimit {
            return false
        }
        if lhs.feeAmount != rhs.feeAmount {
            return false
        }
        if lhs.timeoutHeight != rhs.timeoutHeight {
            return false
        }
        if lhs.memoNote != rhs.memoNote {
            return false
        }
        if lhs.network != rhs.network {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(accountNumber)
        hasher.combine(sequenceNumber)
        hasher.combine(gasLimit)
        hasher.combine(feeAmount)
        hasher.combine(timeoutHeight)
        hasher.combine(memoNote)
        hasher.combine(network)
    }
}

private extension CosmosSdkTxInfo {
    static func read(from buf: Reader) throws -> CosmosSdkTxInfo {
        return try CosmosSdkTxInfo(
            accountNumber: UInt64.read(from: buf),
            sequenceNumber: UInt64.read(from: buf),
            gasLimit: UInt64.read(from: buf),
            feeAmount: SingleCoin.read(from: buf),
            timeoutHeight: UInt32.read(from: buf),
            memoNote: FfiConverterOptionString.read(from: buf),
            network: Network.read(from: buf)
        )
    }

    func write(into buf: Writer) {
        accountNumber.write(into: buf)
        sequenceNumber.write(into: buf)
        gasLimit.write(into: buf)
        feeAmount.write(into: buf)
        timeoutHeight.write(into: buf)
        FfiConverterOptionString.write(memoNote, into: buf)
        network.write(into: buf)
    }
}

extension CosmosSdkTxInfo: ViaFfiUsingByteBuffer, ViaFfi {}

public enum HdWrapError {
    // Simple error enums only carry a message
    case InvalidLength(message: String)

    // Simple error enums only carry a message
    case HdError(message: String)

    // Simple error enums only carry a message
    case AccountId(message: String)
}

extension HdWrapError: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> HdWrapError {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .InvalidLength(
                message: try String.read(from: buf)
            )

        case 2: return .HdError(
                message: try String.read(from: buf)
            )

        case 3: return .AccountId(
                message: try String.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case let .InvalidLength(message):
            buf.writeInt(Int32(1))
            message.write(into: buf)
        case let .HdError(message):
            buf.writeInt(Int32(2))
            message.write(into: buf)
        case let .AccountId(message):
            buf.writeInt(Int32(3))
            message.write(into: buf)
        }
    }
}

extension HdWrapError: Equatable, Hashable {}

extension HdWrapError: Error {}

public enum PublicKeyBytesError {
    // Simple error enums only carry a message
    case InvalidLength(message: String)
}

extension PublicKeyBytesError: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> PublicKeyBytesError {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .InvalidLength(
                message: try String.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case let .InvalidLength(message):
            buf.writeInt(Int32(1))
            message.write(into: buf)
        }
    }
}

extension PublicKeyBytesError: Equatable, Hashable {}

extension PublicKeyBytesError: Error {}

public enum ErrorWrapper {
    // Simple error enums only carry a message
    case EyreReport(message: String)

    // Simple error enums only carry a message
    case PubkeyError(message: String)
}

extension ErrorWrapper: ViaFfiUsingByteBuffer, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> ErrorWrapper {
        let variant: Int32 = try buf.readInt()
        switch variant {
        case 1: return .EyreReport(
                message: try String.read(from: buf)
            )

        case 2: return .PubkeyError(
                message: try String.read(from: buf)
            )

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    fileprivate func write(into buf: Writer) {
        switch self {
        case let .EyreReport(message):
            buf.writeInt(Int32(1))
            message.write(into: buf)
        case let .PubkeyError(message):
            buf.writeInt(Int32(2))
            message.write(into: buf)
        }
    }
}

extension ErrorWrapper: Equatable, Hashable {}

extension ErrorWrapper: Error {}
extension UInt8: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Self {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension UInt32: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Self {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension UInt64: Primitive, ViaFfi {
    fileprivate static func read(from buf: Reader) throws -> Self {
        return try lift(buf.readInt())
    }

    fileprivate func write(into buf: Writer) {
        buf.writeInt(lower())
    }
}

extension String: ViaFfi {
    fileprivate typealias FfiType = RustBuffer

    fileprivate static func lift(_ v: FfiType) throws -> Self {
        defer {
            v.deallocate()
        }
        if v.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: v.data!, count: Int(v.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    fileprivate func lower() -> FfiType {
        return utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    fileprivate static func read(from buf: Reader) throws -> Self {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    fileprivate func write(into buf: Writer) {
        let len = Int32(utf8.count)
        buf.writeInt(len)
        buf.writeBytes(utf8)
    }
}

// Helper code for HdWallet class is found in ObjectTemplate.swift
// Helper code for SecretKey class is found in ObjectTemplate.swift
// Helper code for CosmosSdkTxInfo record is found in RecordTemplate.swift
// Helper code for CosmosSdkMsg enum is found in EnumTemplate.swift
// Helper code for Network enum is found in EnumTemplate.swift
// Helper code for SingleCoin enum is found in EnumTemplate.swift
// Helper code for WalletCoin enum is found in EnumTemplate.swift
// Helper code for ErrorWrapper error is found in ErrorTemplate.swift
// Helper code for HdWrapError error is found in ErrorTemplate.swift
// Helper code for PublicKeyBytesError error is found in ErrorTemplate.swift

private enum FfiConverterOptionString: FfiConverterUsingByteBuffer {
    typealias SwiftType = String?

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterOptional.write(value, into: buf) { item, buf in
            item.write(into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterOptional.read(from: buf) { buf in
            try String.read(from: buf)
        }
    }
}

private enum FfiConverterSequenceUInt8: FfiConverterUsingByteBuffer {
    typealias SwiftType = [UInt8]

    static func write(_ value: SwiftType, into buf: Writer) {
        FfiConverterSequence.write(value, into: buf) { item, buf in
            item.write(into: buf)
        }
    }

    static func read(from buf: Reader) throws -> SwiftType {
        try FfiConverterSequence.read(from: buf) { buf in
            try UInt8.read(from: buf)
        }
    }
}

/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum CommonLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
        // No initialization code needed
    }
}
