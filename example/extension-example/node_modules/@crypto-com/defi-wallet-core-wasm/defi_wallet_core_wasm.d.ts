/* tslint:disable */
/* eslint-disable */
/**
* @param {Uint8Array} data
* @returns {string}
*/
export function bytes2hex(data: Uint8Array): string;
/**
* creates the transaction signing payload (`SignDoc`)
* for `MsgSend` from the Cosmos SDK bank module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {Uint8Array} sender_pubkey
* @param {string} recipient_address
* @param {BigInt} amount
* @param {string} denom
* @returns {Uint8Array}
*/
export function get_single_bank_send_signdoc(tx_info: CosmosSDKTxInfoRaw, sender_pubkey: Uint8Array, recipient_address: string, amount: BigInt, denom: string): Uint8Array;
/**
* creates the signed transaction
* for MsgSend from the Cosmos SDK bank module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} recipient_address
* @param {BigInt} amount
* @param {string} denom
* @returns {Uint8Array}
*/
export function get_single_bank_send_signed_tx(tx_info: CosmosSDKTxInfoRaw, private_key: PrivateKey, recipient_address: string, amount: BigInt, denom: string): Uint8Array;
/**
* creates the signed transaction
* for `MsgIssueDenom` from the Chainmain nft module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} id
* @param {string} name
* @param {string} schema
* @returns {Uint8Array}
*/
export function get_nft_issue_denom_signed_tx(tx_info: CosmosSDKTxInfoRaw, private_key: PrivateKey, id: string, name: string, schema: string): Uint8Array;
/**
* creates the signed transaction
* for `MsgMintNft` from the Chainmain nft module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} id
* @param {string} denom_id
* @param {string} name
* @param {string} uri
* @param {string} data
* @param {string} recipient
* @returns {Uint8Array}
*/
export function get_nft_mint_signed_tx(tx_info: CosmosSDKTxInfoRaw, private_key: PrivateKey, id: string, denom_id: string, name: string, uri: string, data: string, recipient: string): Uint8Array;
/**
* creates the signed transaction
* for `MsgEditNft` from the Chainmain nft module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} id
* @param {string} denom_id
* @param {string} name
* @param {string} uri
* @param {string} data
* @returns {Uint8Array}
*/
export function get_nft_edit_signed_tx(tx_info: CosmosSDKTxInfoRaw, private_key: PrivateKey, id: string, denom_id: string, name: string, uri: string, data: string): Uint8Array;
/**
* creates the signed transaction
* for `MsgTransferNft` from the Chainmain nft module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} id
* @param {string} denom_id
* @param {string} recipient
* @returns {Uint8Array}
*/
export function get_nft_transfer_signed_tx(tx_info: CosmosSDKTxInfoRaw, private_key: PrivateKey, id: string, denom_id: string, recipient: string): Uint8Array;
/**
* creates the signed transaction
* for `MsgBurnNft` from the Chainmain nft module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} id
* @param {string} denom_id
* @returns {Uint8Array}
*/
export function get_nft_burn_signed_tx(tx_info: CosmosSDKTxInfoRaw, private_key: PrivateKey, id: string, denom_id: string): Uint8Array;
/**
* creates the signed transaction
* for `StakingDelegate` from the Chainmain staking module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} validator_address
* @param {BigInt} amount
* @param {string} denom
* @param {boolean} with_reward_withdrawal
* @returns {Uint8Array}
*/
export function get_staking_delegate_signed_tx(tx_info: CosmosSDKTxInfoRaw, private_key: PrivateKey, validator_address: string, amount: BigInt, denom: string, with_reward_withdrawal: boolean): Uint8Array;
/**
* creates the signed transaction
* for `StakingBeginRedelegate` from the Chainmain staking module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} validator_src_address
* @param {string} validator_dst_address
* @param {BigInt} amount
* @param {string} denom
* @param {boolean} with_reward_withdrawal
* @returns {Uint8Array}
*/
export function get_staking_redelegate_signed_tx(tx_info: CosmosSDKTxInfoRaw, private_key: PrivateKey, validator_src_address: string, validator_dst_address: string, amount: BigInt, denom: string, with_reward_withdrawal: boolean): Uint8Array;
/**
* creates the signed transaction
* for `StakingUndelegate` from the Chainmain staking module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} validator_address
* @param {BigInt} amount
* @param {string} denom
* @param {boolean} with_reward_withdrawal
* @returns {Uint8Array}
*/
export function get_staking_unbond_signed_tx(tx_info: CosmosSDKTxInfoRaw, private_key: PrivateKey, validator_address: string, amount: BigInt, denom: string, with_reward_withdrawal: boolean): Uint8Array;
/**
* creates the signed transaction
* for `DistributionSetWithdrawAddress` from the Chainmain distribution module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} withdraw_address
* @returns {Uint8Array}
*/
export function get_distribution_set_withdraw_address_signed_tx(tx_info: CosmosSDKTxInfoRaw, private_key: PrivateKey, withdraw_address: string): Uint8Array;
/**
* creates the signed transaction
* for `DistributionWithdrawDelegatorReward` from the Chainmain distribution module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} validator_address
* @returns {Uint8Array}
*/
export function get_distribution_withdraw_reward_signed_tx(tx_info: CosmosSDKTxInfoRaw, private_key: PrivateKey, validator_address: string): Uint8Array;
/**
* creates the signed transaction
* for `IbcTransfer` from the Chainmain ibc module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} receiver
* @param {string} source_port
* @param {string} source_channel
* @param {string} denom
* @param {BigInt} token
* @param {BigInt} revision_height
* @param {BigInt} revision_number
* @param {BigInt} timeout_timestamp
* @returns {Uint8Array}
*/
export function get_ibc_transfer_signed_tx(tx_info: CosmosSDKTxInfoRaw, private_key: PrivateKey, receiver: string, source_port: string, source_channel: string, denom: string, token: BigInt, revision_height: BigInt, revision_number: BigInt, timeout_timestamp: BigInt): Uint8Array;
/**
* retrieves the account details (e.g. sequence and account number) for a given address
* TODO: switch to grpc-web
* @param {string} api_url
* @param {string} address
* @returns {Promise<any>}
*/
export function query_account_details(api_url: string, address: string): Promise<any>;
/**
* retrieves the account balance for a given address and a denom
* api-version: https://github.com/cosmos/cosmos-sdk/releases/tag/v0.42.11
* - 0 means before 0.42.11 or 0.44.4
* - >=1 means after 0.42.11 or 0.44.4
* TODO: switch to grpc-web
* @param {string} api_url
* @param {string} address
* @param {string} denom
* @param {number} api_version
* @returns {Promise<any>}
*/
export function query_account_balance(api_url: string, address: string, denom: string, api_version: number): Promise<any>;
/**
* broadcasts a signed cosmos sdk tx
* @param {string} tendermint_rpc_url
* @param {Uint8Array} raw_signed_tx
* @returns {Promise<any>}
*/
export function broadcast_tx(tendermint_rpc_url: string, raw_signed_tx: Uint8Array): Promise<any>;
/**
* return the account's balance formatted as ether decimals
* @param {string} web3_api_url
* @param {string} address
* @returns {Promise<any>}
*/
export function query_account_eth_balance(web3_api_url: string, address: string): Promise<any>;
/**
* return the account's token contract balance formatted as hexadecimals
* @param {string} web3_api_url
* @param {string} address
* @param {string} contract_address
* @param {number} contract_type
* @param {string | undefined} token_id
* @returns {Promise<any>}
*/
export function query_account_contract_token_balance(web3_api_url: string, address: string, contract_address: string, contract_type: number, token_id?: string): Promise<any>;
/**
* construct, sign and broadcast a plain transfer of eth/native token
* @param {string} web3_api_url
* @param {string} to_address_hex
* @param {string} eth_amount_decimal
* @param {BigInt} chain_id
* @param {PrivateKey} private_key
* @returns {Promise<any>}
*/
export function broadcast_transfer_eth(web3_api_url: string, to_address_hex: string, eth_amount_decimal: string, chain_id: BigInt, private_key: PrivateKey): Promise<any>;
/**
* construct, sign and broadcast an approval of a ERC20/ERC721/ERC1155 token
* @param {ContractApprovalDetails} details
* @param {string} web3_api_url
* @param {BigInt} chain_id
* @param {PrivateKey} private_key
* @returns {Promise<any>}
*/
export function broadcast_approval_contract(details: ContractApprovalDetails, web3_api_url: string, chain_id: BigInt, private_key: PrivateKey): Promise<any>;
/**
* construct, sign and broadcast a transfer of a ERC20/ERC721/ERC1155 token
* @param {ContractTransferDetails} details
* @param {string} web3_api_url
* @param {BigInt} chain_id
* @param {PrivateKey} private_key
* @returns {Promise<any>}
*/
export function broadcast_transfer_contract(details: ContractTransferDetails, web3_api_url: string, chain_id: BigInt, private_key: PrivateKey): Promise<any>;
/**
* basic supported coins for wasm
* TODO: re-work with `Network`
* (wasm only supports C-style enums)
*/
export enum CoinType {
/**
* Crypto.org Chain mainnet
*/
  CryptoOrgMainnet,
/**
* Crypto.org Chain testnet
*/
  CryptoOrgTestnet,
/**
* Cronos mainnet beta
*/
  CronosMainnet,
/**
* Cosmos Hub mainnet
*/
  CosmosHub,
}
/**
*/
export enum MnemonicWordCount {
/**
* Word 12
*/
  Twelve,
/**
* Word 18
*/
  Eighteen,
/**
* Word 24
*/
  TwentyFour,
}
/**
* the token contract type
*/
export enum ContractType {
  Erc20,
  Erc721,
  Erc1155,
}
/**
* details needed for contract approval transaction
*/
export class ContractApprovalDetails {
  free(): void;
/**
* constructs arguments for ERC-20 function approve
* @param {string} contract_address
* @param {string} spender_address
* @param {string} amount_hex
* @returns {ContractApprovalDetails}
*/
  static build_erc20_approve(contract_address: string, spender_address: string, amount_hex: string): ContractApprovalDetails;
/**
* constructs arguments for ERC-721 function approve
* @param {string} contract_address
* @param {string} approved_address
* @param {string} token_id
* @returns {ContractApprovalDetails}
*/
  static build_erc721_approve(contract_address: string, approved_address: string, token_id: string): ContractApprovalDetails;
/**
* constructs arguments for ERC-721 function setApprovalForAll
* @param {string} contract_address
* @param {string} operator_address
* @param {boolean} approved
* @returns {ContractApprovalDetails}
*/
  static build_erc721_set_approval_for_all(contract_address: string, operator_address: string, approved: boolean): ContractApprovalDetails;
/**
* constructs arguments for ERC-1155 function setApprovalForAll
* @param {string} contract_address
* @param {string} operator_address
* @param {boolean} approved
* @returns {ContractApprovalDetails}
*/
  static build_erc1155_set_approval_for_all(contract_address: string, operator_address: string, approved: boolean): ContractApprovalDetails;
}
/**
* details needed for contract transfer transaction
*/
export class ContractTransferDetails {
  free(): void;
/**
* constructs arguments for ERC-20 function transfer
* @param {string} contract_address
* @param {string} to_address
* @param {string} amount_hex
* @returns {ContractTransferDetails}
*/
  static build_erc20_transfer(contract_address: string, to_address: string, amount_hex: string): ContractTransferDetails;
/**
* constructs arguments for ERC-20 function transferFrom
* @param {string} contract_address
* @param {string} from_address
* @param {string} to_address
* @param {string} amount_hex
* @returns {ContractTransferDetails}
*/
  static build_erc20_transfer_from(contract_address: string, from_address: string, to_address: string, amount_hex: string): ContractTransferDetails;
/**
* constructs arguments for ERC-721 function transferFrom
* @param {string} contract_address
* @param {string} from_address
* @param {string} to_address
* @param {string} token_id
* @returns {ContractTransferDetails}
*/
  static build_erc721_transfer_from(contract_address: string, from_address: string, to_address: string, token_id: string): ContractTransferDetails;
/**
* constructs arguments for ERC-721 function safeTransferFrom (no additional data)
* @param {string} contract_address
* @param {string} from_address
* @param {string} to_address
* @param {string} token_id
* @returns {ContractTransferDetails}
*/
  static build_erc721_safe_transfer_from(contract_address: string, from_address: string, to_address: string, token_id: string): ContractTransferDetails;
/**
* constructs arguments for ERC-721 function safeTransferFrom with argument additional data
* @param {string} contract_address
* @param {string} from_address
* @param {string} to_address
* @param {string} token_id
* @param {Uint8Array} additional_data
* @returns {ContractTransferDetails}
*/
  static build_erc721_safe_transfer_from_with_additional_data(contract_address: string, from_address: string, to_address: string, token_id: string, additional_data: Uint8Array): ContractTransferDetails;
/**
* constructs arguments for ERC-1155 function safeTransferFrom
* @param {string} contract_address
* @param {string} from_address
* @param {string} to_address
* @param {string} token_id
* @param {string} amount_hex
* @param {Uint8Array} additional_data
* @returns {ContractTransferDetails}
*/
  static build_erc1155_safe_transfer_from(contract_address: string, from_address: string, to_address: string, token_id: string, amount_hex: string, additional_data: Uint8Array): ContractTransferDetails;
}
/**
* the common transaction data needed for Cosmos SDK transactions
* (raw duplicate needed for Wasm -- TODO: unify common structures?)
*/
export class CosmosSDKTxInfoRaw {
  free(): void;
/**
* constructor for JS -- TODO: some builder API wrapper?
* @param {BigInt} account_number
* @param {BigInt} sequence_number
* @param {BigInt} gas_limit
* @param {BigInt} fee_amount
* @param {string} fee_denom
* @param {number} timeout_height
* @param {string | undefined} memo_note
* @param {string} chain_id
* @param {string} bech32hrp
* @param {number} coin_type
*/
  constructor(account_number: BigInt, sequence_number: BigInt, gas_limit: BigInt, fee_amount: BigInt, fee_denom: string, timeout_height: number, memo_note: string | undefined, chain_id: string, bech32hrp: string, coin_type: number);
/**
* global account number of the sender
*/
  account_number: BigInt;
/**
* bech32 human readable prefix
*/
  bech32hrp: string;
/**
* the network chain id
*/
  chain_id: string;
/**
* the coin type to use
*/
  coin_type: number;
/**
* the amount fee to be paid (gas_limit * gas_price)
*/
  fee_amount: BigInt;
/**
* the fee's denomination
*/
  fee_denom: string;
/**
* the maximum gas limit
*/
  gas_limit: BigInt;
/**
* optional memo
*/
  memo_note?: string;
/**
* equivalent of "account nonce"
*/
  sequence_number: BigInt;
/**
* transaction timeout
*/
  timeout_height: number;
}
/**
* Grpc Web Client wrapper for Wasm
*/
export class GrpcWebClient {
  free(): void;
}
/**
*/
export class IntoUnderlyingByteSource {
  free(): void;
/**
* @param {any} controller
*/
  start(controller: any): void;
/**
* @param {any} controller
* @returns {Promise<any>}
*/
  pull(controller: any): Promise<any>;
/**
*/
  cancel(): void;
/**
* @returns {number}
*/
  readonly autoAllocateChunkSize: number;
/**
* @returns {any}
*/
  readonly type: any;
}
/**
*/
export class IntoUnderlyingSink {
  free(): void;
/**
* @param {any} chunk
* @returns {Promise<any>}
*/
  write(chunk: any): Promise<any>;
/**
* @returns {Promise<any>}
*/
  close(): Promise<any>;
/**
* @param {any} reason
* @returns {Promise<any>}
*/
  abort(reason: any): Promise<any>;
}
/**
*/
export class IntoUnderlyingSource {
  free(): void;
/**
* @param {any} controller
* @returns {Promise<any>}
*/
  pull(controller: any): Promise<any>;
/**
*/
  cancel(): void;
}
/**
* Raw options for [`pipeTo()`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/pipeTo).
*/
export class PipeOptions {
  free(): void;
/**
* @returns {boolean}
*/
  readonly preventAbort: boolean;
/**
* @returns {boolean}
*/
  readonly preventCancel: boolean;
/**
* @returns {boolean}
*/
  readonly preventClose: boolean;
/**
* @returns {AbortSignal | undefined}
*/
  readonly signal: AbortSignal | undefined;
}
/**
* Signing key wrapper for Wasm
*/
export class PrivateKey {
  free(): void;
/**
* generates a random private key
*/
  constructor();
/**
* constructs private key from bytes
* @param {Uint8Array} bytes
* @returns {PrivateKey}
*/
  static from_bytes(bytes: Uint8Array): PrivateKey;
/**
* constructs private key from hex
* @param {string} hex
* @returns {PrivateKey}
*/
  static from_hex(hex: string): PrivateKey;
/**
* gets public key to byte array
* @returns {Uint8Array}
*/
  get_public_key_bytes(): Uint8Array;
/**
* gets public key to a hex string without the 0x prefix
* @returns {string}
*/
  get_public_key_hex(): string;
/**
* converts private key to byte array
* @returns {Uint8Array}
*/
  to_bytes(): Uint8Array;
/**
* converts private key to a hex string without the 0x prefix
* @returns {string}
*/
  to_hex(): string;
}
/**
*/
export class QueuingStrategy {
  free(): void;
/**
* @returns {number}
*/
  readonly highWaterMark: number;
}
/**
* Raw options for [`getReader()`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/getReader).
*/
export class ReadableStreamGetReaderOptions {
  free(): void;
/**
* @returns {any}
*/
  readonly mode: any;
}
/**
* HD Wallet wrapper for Wasm
*/
export class Wallet {
  free(): void;
/**
* generate a random wallet (with an optional password)
* @param {string | undefined} password
* @param {number | undefined} word_count
*/
  constructor(password?: string, word_count?: number);
/**
* recovers/imports HD wallet from a BIP39 backup phrase (English words) and an optional password
* @param {string} mnemonic_phase
* @param {string | undefined} password
* @returns {Wallet}
*/
  static recover_wallet(mnemonic_phase: string, password?: string): Wallet;
/**
* return the default address for a given coin type
* @param {number} coin
* @returns {string}
*/
  get_default_address(coin: number): string;
/**
* return the address for a given coin type and index
* @param {number} coin
* @param {number} index
* @returns {string}
*/
  get_address(coin: number, index: number): string;
/**
* obtain a signing key for a given derivation path
* derivation_path is bip44 key path
* @param {string} derivation_path
* @returns {PrivateKey}
*/
  get_key(derivation_path: string): PrivateKey;
/**
* Get the mnemonic for the wallet
* @returns {string | undefined}
*/
  get_backup_mnemonic_phrase(): string | undefined;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_wallet_free: (a: number) => void;
  readonly __wbg_privatekey_free: (a: number) => void;
  readonly privatekey_new: () => number;
  readonly privatekey_from_bytes: (a: number, b: number, c: number) => void;
  readonly privatekey_from_hex: (a: number, b: number, c: number) => void;
  readonly privatekey_get_public_key_bytes: (a: number, b: number) => void;
  readonly privatekey_get_public_key_hex: (a: number, b: number) => void;
  readonly privatekey_to_bytes: (a: number, b: number) => void;
  readonly privatekey_to_hex: (a: number, b: number) => void;
  readonly bytes2hex: (a: number, b: number, c: number) => void;
  readonly wallet_new: (a: number, b: number, c: number, d: number) => void;
  readonly wallet_recover_wallet: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly wallet_get_default_address: (a: number, b: number, c: number) => void;
  readonly wallet_get_address: (a: number, b: number, c: number, d: number) => void;
  readonly wallet_get_key: (a: number, b: number, c: number, d: number) => void;
  readonly wallet_get_backup_mnemonic_phrase: (a: number, b: number) => void;
  readonly __wbg_cosmossdktxinforaw_free: (a: number) => void;
  readonly __wbg_get_cosmossdktxinforaw_account_number: (a: number, b: number) => void;
  readonly __wbg_set_cosmossdktxinforaw_account_number: (a: number, b: number, c: number) => void;
  readonly __wbg_get_cosmossdktxinforaw_sequence_number: (a: number, b: number) => void;
  readonly __wbg_set_cosmossdktxinforaw_sequence_number: (a: number, b: number, c: number) => void;
  readonly __wbg_get_cosmossdktxinforaw_gas_limit: (a: number, b: number) => void;
  readonly __wbg_set_cosmossdktxinforaw_gas_limit: (a: number, b: number, c: number) => void;
  readonly __wbg_get_cosmossdktxinforaw_fee_amount: (a: number, b: number) => void;
  readonly __wbg_set_cosmossdktxinforaw_fee_amount: (a: number, b: number, c: number) => void;
  readonly __wbg_get_cosmossdktxinforaw_fee_denom: (a: number, b: number) => void;
  readonly __wbg_set_cosmossdktxinforaw_fee_denom: (a: number, b: number, c: number) => void;
  readonly __wbg_get_cosmossdktxinforaw_timeout_height: (a: number) => number;
  readonly __wbg_set_cosmossdktxinforaw_timeout_height: (a: number, b: number) => void;
  readonly __wbg_get_cosmossdktxinforaw_memo_note: (a: number, b: number) => void;
  readonly __wbg_set_cosmossdktxinforaw_memo_note: (a: number, b: number, c: number) => void;
  readonly __wbg_get_cosmossdktxinforaw_chain_id: (a: number, b: number) => void;
  readonly __wbg_set_cosmossdktxinforaw_chain_id: (a: number, b: number, c: number) => void;
  readonly __wbg_get_cosmossdktxinforaw_bech32hrp: (a: number, b: number) => void;
  readonly __wbg_set_cosmossdktxinforaw_bech32hrp: (a: number, b: number, c: number) => void;
  readonly __wbg_get_cosmossdktxinforaw_coin_type: (a: number) => number;
  readonly __wbg_set_cosmossdktxinforaw_coin_type: (a: number, b: number) => void;
  readonly cosmossdktxinforaw_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number) => number;
  readonly get_single_bank_send_signdoc: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
  readonly get_single_bank_send_signed_tx: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
  readonly get_nft_issue_denom_signed_tx: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
  readonly get_nft_mint_signed_tx: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number) => void;
  readonly get_nft_edit_signed_tx: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number) => void;
  readonly get_nft_transfer_signed_tx: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => void;
  readonly get_nft_burn_signed_tx: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => void;
  readonly get_staking_delegate_signed_tx: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
  readonly get_staking_redelegate_signed_tx: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number) => void;
  readonly get_staking_unbond_signed_tx: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => void;
  readonly get_distribution_set_withdraw_address_signed_tx: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly get_distribution_withdraw_reward_signed_tx: (a: number, b: number, c: number, d: number, e: number) => void;
  readonly get_ibc_transfer_signed_tx: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number, r: number, s: number) => void;
  readonly query_account_details: (a: number, b: number, c: number, d: number) => number;
  readonly query_account_balance: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
  readonly broadcast_tx: (a: number, b: number, c: number, d: number) => number;
  readonly query_account_eth_balance: (a: number, b: number, c: number, d: number) => number;
  readonly query_account_contract_token_balance: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => number;
  readonly broadcast_transfer_eth: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => number;
  readonly __wbg_contractapprovaldetails_free: (a: number) => void;
  readonly contractapprovaldetails_build_erc20_approve: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
  readonly contractapprovaldetails_build_erc721_approve: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
  readonly contractapprovaldetails_build_erc721_set_approval_for_all: (a: number, b: number, c: number, d: number, e: number) => number;
  readonly contractapprovaldetails_build_erc1155_set_approval_for_all: (a: number, b: number, c: number, d: number, e: number) => number;
  readonly __wbg_contracttransferdetails_free: (a: number) => void;
  readonly contracttransferdetails_build_erc20_transfer: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
  readonly contracttransferdetails_build_erc20_transfer_from: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => number;
  readonly contracttransferdetails_build_erc721_transfer_from: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => number;
  readonly contracttransferdetails_build_erc721_safe_transfer_from: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => number;
  readonly contracttransferdetails_build_erc721_safe_transfer_from_with_additional_data: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => number;
  readonly contracttransferdetails_build_erc1155_safe_transfer_from: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number) => number;
  readonly broadcast_approval_contract: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
  readonly broadcast_transfer_contract: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
  readonly __wbg_grpcwebclient_free: (a: number) => void;
  readonly __wbg_readablestreamgetreaderoptions_free: (a: number) => void;
  readonly readablestreamgetreaderoptions_mode: (a: number) => number;
  readonly __wbg_pipeoptions_free: (a: number) => void;
  readonly pipeoptions_preventClose: (a: number) => number;
  readonly pipeoptions_preventCancel: (a: number) => number;
  readonly pipeoptions_preventAbort: (a: number) => number;
  readonly pipeoptions_signal: (a: number) => number;
  readonly __wbg_queuingstrategy_free: (a: number) => void;
  readonly queuingstrategy_highWaterMark: (a: number) => number;
  readonly __wbg_intounderlyingsource_free: (a: number) => void;
  readonly intounderlyingsource_pull: (a: number, b: number) => number;
  readonly intounderlyingsource_cancel: (a: number) => void;
  readonly __wbg_intounderlyingsink_free: (a: number) => void;
  readonly intounderlyingsink_write: (a: number, b: number) => number;
  readonly intounderlyingsink_close: (a: number) => number;
  readonly intounderlyingsink_abort: (a: number, b: number) => number;
  readonly __wbg_intounderlyingbytesource_free: (a: number) => void;
  readonly intounderlyingbytesource_type: (a: number) => number;
  readonly intounderlyingbytesource_autoAllocateChunkSize: (a: number) => number;
  readonly intounderlyingbytesource_start: (a: number, b: number) => void;
  readonly intounderlyingbytesource_pull: (a: number, b: number) => number;
  readonly intounderlyingbytesource_cancel: (a: number) => void;
  readonly __wbindgen_malloc: (a: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number) => number;
  readonly __wbindgen_export_2: WebAssembly.Table;
  readonly _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h2caf7d5c6f767139: (a: number, b: number) => void;
  readonly _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__he916b9e495b9fd9a: (a: number, b: number, c: number) => void;
  readonly __wbindgen_add_to_stack_pointer: (a: number) => number;
  readonly __wbindgen_free: (a: number, b: number) => void;
  readonly __wbindgen_exn_store: (a: number) => void;
  readonly wasm_bindgen__convert__closures__invoke2_mut__hc485200ef60307e9: (a: number, b: number, c: number, d: number) => void;
}

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {InitInput | Promise<InitInput>} module_or_path
*
* @returns {Promise<InitOutput>}
*/
export default function init (module_or_path?: InitInput | Promise<InitInput>): Promise<InitOutput>;
