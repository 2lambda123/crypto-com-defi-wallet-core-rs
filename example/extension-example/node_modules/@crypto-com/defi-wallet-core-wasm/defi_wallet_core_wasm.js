import { bytes_literal } from './snippets/wasm-streams-8c20110b5d812e48/inline0.js';

let wasm;

const heap = new Array(32).fill(undefined);

heap.push(undefined, null, true, false);

function getObject(idx) { return heap[idx]; }

let heap_next = heap.length;

function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}

let cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

let cachegetUint8Memory0 = null;
function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory0;
}

function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}

let WASM_VECTOR_LEN = 0;

let cachedTextEncoder = new TextEncoder('utf-8');

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length);
        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len);

    const mem = getUint8Memory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3);
        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

function isLikeNone(x) {
    return x === undefined || x === null;
}

let cachegetInt32Memory0 = null;
function getInt32Memory0() {
    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32Memory0;
}

function debugString(val) {
    // primitive types
    const type = typeof val;
    if (type == 'number' || type == 'boolean' || val == null) {
        return  `${val}`;
    }
    if (type == 'string') {
        return `"${val}"`;
    }
    if (type == 'symbol') {
        const description = val.description;
        if (description == null) {
            return 'Symbol';
        } else {
            return `Symbol(${description})`;
        }
    }
    if (type == 'function') {
        const name = val.name;
        if (typeof name == 'string' && name.length > 0) {
            return `Function(${name})`;
        } else {
            return 'Function';
        }
    }
    // objects
    if (Array.isArray(val)) {
        const length = val.length;
        let debug = '[';
        if (length > 0) {
            debug += debugString(val[0]);
        }
        for(let i = 1; i < length; i++) {
            debug += ', ' + debugString(val[i]);
        }
        debug += ']';
        return debug;
    }
    // Test for built-in
    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
    let className;
    if (builtInMatches.length > 1) {
        className = builtInMatches[1];
    } else {
        // Failed to match the standard '[object ClassName]'
        return toString.call(val);
    }
    if (className == 'Object') {
        // we're a user defined class or Object
        // JSON.stringify avoids problems with cycles, and is generally much
        // easier than looping through ownProperties of `val`.
        try {
            return 'Object(' + JSON.stringify(val) + ')';
        } catch (_) {
            return 'Object';
        }
    }
    // errors
    if (val instanceof Error) {
        return `${val.name}: ${val.message}\n${val.stack}`;
    }
    // TODO we could test for more things here, like `Set`s and `Map`s.
    return className;
}

function makeMutClosure(arg0, arg1, dtor, f) {
    const state = { a: arg0, b: arg1, cnt: 1, dtor };
    const real = (...args) => {
        // First up with a closure we increment the internal reference
        // count. This ensures that the Rust closure environment won't
        // be deallocated while we're invoking it.
        state.cnt++;
        const a = state.a;
        state.a = 0;
        try {
            return f(a, state.b, ...args);
        } finally {
            if (--state.cnt === 0) {
                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);

            } else {
                state.a = a;
            }
        }
    };
    real.original = state;

    return real;
}
function __wbg_adapter_32(arg0, arg1) {
    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h3637a4a450387263(arg0, arg1);
}

function __wbg_adapter_35(arg0, arg1, arg2) {
    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h5a259308b3626bce(arg0, arg1, addHeapObject(arg2));
}

function passArray8ToWasm0(arg, malloc) {
    const ptr = malloc(arg.length * 1);
    getUint8Memory0().set(arg, ptr / 1);
    WASM_VECTOR_LEN = arg.length;
    return ptr;
}

function getArrayU8FromWasm0(ptr, len) {
    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
}
/**
* @param {Uint8Array} data
* @returns {string}
*/
export function bytes2hex(data) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.bytes2hex(retptr, ptr0, len0);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        return getStringFromWasm0(r0, r1);
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
        wasm.__wbindgen_free(r0, r1);
    }
}

const u32CvtShim = new Uint32Array(2);

const uint64CvtShim = new BigUint64Array(u32CvtShim.buffer);

function _assertClass(instance, klass) {
    if (!(instance instanceof klass)) {
        throw new Error(`expected instance of ${klass.name}`);
    }
    return instance.ptr;
}
/**
* creates the transaction signing payload (`SignDoc`)
* for `MsgSend` from the Cosmos SDK bank module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {Uint8Array} sender_pubkey
* @param {string} recipient_address
* @param {BigInt} amount
* @param {string} denom
* @returns {Uint8Array}
*/
export function get_single_bank_send_signdoc(tx_info, sender_pubkey, recipient_address, amount, denom) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(tx_info, CosmosSDKTxInfoRaw);
        var ptr0 = tx_info.ptr;
        tx_info.ptr = 0;
        var ptr1 = passArray8ToWasm0(sender_pubkey, wasm.__wbindgen_malloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(recipient_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        uint64CvtShim[0] = amount;
        const low3 = u32CvtShim[0];
        const high3 = u32CvtShim[1];
        var ptr4 = passStringToWasm0(denom, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len4 = WASM_VECTOR_LEN;
        wasm.get_single_bank_send_signdoc(retptr, ptr0, ptr1, len1, ptr2, len2, low3, high3, ptr4, len4);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        if (r3) {
            throw takeObject(r2);
        }
        var v5 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v5;
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* creates the signed transaction
* for MsgSend from the Cosmos SDK bank module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} recipient_address
* @param {BigInt} amount
* @param {string} denom
* @returns {Uint8Array}
*/
export function get_single_bank_send_signed_tx(tx_info, private_key, recipient_address, amount, denom) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(tx_info, CosmosSDKTxInfoRaw);
        var ptr0 = tx_info.ptr;
        tx_info.ptr = 0;
        _assertClass(private_key, PrivateKey);
        var ptr1 = private_key.ptr;
        private_key.ptr = 0;
        var ptr2 = passStringToWasm0(recipient_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        uint64CvtShim[0] = amount;
        const low3 = u32CvtShim[0];
        const high3 = u32CvtShim[1];
        var ptr4 = passStringToWasm0(denom, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len4 = WASM_VECTOR_LEN;
        wasm.get_single_bank_send_signed_tx(retptr, ptr0, ptr1, ptr2, len2, low3, high3, ptr4, len4);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        if (r3) {
            throw takeObject(r2);
        }
        var v5 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v5;
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* creates the signed transaction
* for `MsgIssueDenom` from the Chainmain nft module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} id
* @param {string} name
* @param {string} schema
* @returns {Uint8Array}
*/
export function get_nft_issue_denom_signed_tx(tx_info, private_key, id, name, schema) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(tx_info, CosmosSDKTxInfoRaw);
        var ptr0 = tx_info.ptr;
        tx_info.ptr = 0;
        _assertClass(private_key, PrivateKey);
        var ptr1 = private_key.ptr;
        private_key.ptr = 0;
        var ptr2 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ptr4 = passStringToWasm0(schema, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len4 = WASM_VECTOR_LEN;
        wasm.get_nft_issue_denom_signed_tx(retptr, ptr0, ptr1, ptr2, len2, ptr3, len3, ptr4, len4);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        if (r3) {
            throw takeObject(r2);
        }
        var v5 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v5;
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* creates the signed transaction
* for `MsgMintNft` from the Chainmain nft module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} id
* @param {string} denom_id
* @param {string} name
* @param {string} uri
* @param {string} data
* @param {string} recipient
* @returns {Uint8Array}
*/
export function get_nft_mint_signed_tx(tx_info, private_key, id, denom_id, name, uri, data, recipient) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(tx_info, CosmosSDKTxInfoRaw);
        var ptr0 = tx_info.ptr;
        tx_info.ptr = 0;
        _assertClass(private_key, PrivateKey);
        var ptr1 = private_key.ptr;
        private_key.ptr = 0;
        var ptr2 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(denom_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ptr4 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len4 = WASM_VECTOR_LEN;
        var ptr5 = passStringToWasm0(uri, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len5 = WASM_VECTOR_LEN;
        var ptr6 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len6 = WASM_VECTOR_LEN;
        var ptr7 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len7 = WASM_VECTOR_LEN;
        wasm.get_nft_mint_signed_tx(retptr, ptr0, ptr1, ptr2, len2, ptr3, len3, ptr4, len4, ptr5, len5, ptr6, len6, ptr7, len7);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        if (r3) {
            throw takeObject(r2);
        }
        var v8 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v8;
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* creates the signed transaction
* for `MsgEditNft` from the Chainmain nft module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} id
* @param {string} denom_id
* @param {string} name
* @param {string} uri
* @param {string} data
* @returns {Uint8Array}
*/
export function get_nft_edit_signed_tx(tx_info, private_key, id, denom_id, name, uri, data) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(tx_info, CosmosSDKTxInfoRaw);
        var ptr0 = tx_info.ptr;
        tx_info.ptr = 0;
        _assertClass(private_key, PrivateKey);
        var ptr1 = private_key.ptr;
        private_key.ptr = 0;
        var ptr2 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(denom_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ptr4 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len4 = WASM_VECTOR_LEN;
        var ptr5 = passStringToWasm0(uri, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len5 = WASM_VECTOR_LEN;
        var ptr6 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len6 = WASM_VECTOR_LEN;
        wasm.get_nft_edit_signed_tx(retptr, ptr0, ptr1, ptr2, len2, ptr3, len3, ptr4, len4, ptr5, len5, ptr6, len6);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        if (r3) {
            throw takeObject(r2);
        }
        var v7 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v7;
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* creates the signed transaction
* for `MsgTransferNft` from the Chainmain nft module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} id
* @param {string} denom_id
* @param {string} recipient
* @returns {Uint8Array}
*/
export function get_nft_transfer_signed_tx(tx_info, private_key, id, denom_id, recipient) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(tx_info, CosmosSDKTxInfoRaw);
        var ptr0 = tx_info.ptr;
        tx_info.ptr = 0;
        _assertClass(private_key, PrivateKey);
        var ptr1 = private_key.ptr;
        private_key.ptr = 0;
        var ptr2 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(denom_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ptr4 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len4 = WASM_VECTOR_LEN;
        wasm.get_nft_transfer_signed_tx(retptr, ptr0, ptr1, ptr2, len2, ptr3, len3, ptr4, len4);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        if (r3) {
            throw takeObject(r2);
        }
        var v5 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v5;
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* creates the signed transaction
* for `MsgBurnNft` from the Chainmain nft module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} id
* @param {string} denom_id
* @returns {Uint8Array}
*/
export function get_nft_burn_signed_tx(tx_info, private_key, id, denom_id) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(tx_info, CosmosSDKTxInfoRaw);
        var ptr0 = tx_info.ptr;
        tx_info.ptr = 0;
        _assertClass(private_key, PrivateKey);
        var ptr1 = private_key.ptr;
        private_key.ptr = 0;
        var ptr2 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(denom_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        wasm.get_nft_burn_signed_tx(retptr, ptr0, ptr1, ptr2, len2, ptr3, len3);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        if (r3) {
            throw takeObject(r2);
        }
        var v4 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v4;
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* creates the signed transaction
* for `StakingDelegate` from the Chainmain staking module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} validator_address
* @param {BigInt} amount
* @param {string} denom
* @param {boolean} with_reward_withdrawal
* @returns {Uint8Array}
*/
export function get_staking_delegate_signed_tx(tx_info, private_key, validator_address, amount, denom, with_reward_withdrawal) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(tx_info, CosmosSDKTxInfoRaw);
        var ptr0 = tx_info.ptr;
        tx_info.ptr = 0;
        _assertClass(private_key, PrivateKey);
        var ptr1 = private_key.ptr;
        private_key.ptr = 0;
        var ptr2 = passStringToWasm0(validator_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        uint64CvtShim[0] = amount;
        const low3 = u32CvtShim[0];
        const high3 = u32CvtShim[1];
        var ptr4 = passStringToWasm0(denom, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len4 = WASM_VECTOR_LEN;
        wasm.get_staking_delegate_signed_tx(retptr, ptr0, ptr1, ptr2, len2, low3, high3, ptr4, len4, with_reward_withdrawal);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        if (r3) {
            throw takeObject(r2);
        }
        var v5 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v5;
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* creates the signed transaction
* for `StakingBeginRedelegate` from the Chainmain staking module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} validator_src_address
* @param {string} validator_dst_address
* @param {BigInt} amount
* @param {string} denom
* @param {boolean} with_reward_withdrawal
* @returns {Uint8Array}
*/
export function get_staking_redelegate_signed_tx(tx_info, private_key, validator_src_address, validator_dst_address, amount, denom, with_reward_withdrawal) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(tx_info, CosmosSDKTxInfoRaw);
        var ptr0 = tx_info.ptr;
        tx_info.ptr = 0;
        _assertClass(private_key, PrivateKey);
        var ptr1 = private_key.ptr;
        private_key.ptr = 0;
        var ptr2 = passStringToWasm0(validator_src_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(validator_dst_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        uint64CvtShim[0] = amount;
        const low4 = u32CvtShim[0];
        const high4 = u32CvtShim[1];
        var ptr5 = passStringToWasm0(denom, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len5 = WASM_VECTOR_LEN;
        wasm.get_staking_redelegate_signed_tx(retptr, ptr0, ptr1, ptr2, len2, ptr3, len3, low4, high4, ptr5, len5, with_reward_withdrawal);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        if (r3) {
            throw takeObject(r2);
        }
        var v6 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v6;
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* creates the signed transaction
* for `StakingUndelegate` from the Chainmain staking module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} validator_address
* @param {BigInt} amount
* @param {string} denom
* @param {boolean} with_reward_withdrawal
* @returns {Uint8Array}
*/
export function get_staking_unbond_signed_tx(tx_info, private_key, validator_address, amount, denom, with_reward_withdrawal) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(tx_info, CosmosSDKTxInfoRaw);
        var ptr0 = tx_info.ptr;
        tx_info.ptr = 0;
        _assertClass(private_key, PrivateKey);
        var ptr1 = private_key.ptr;
        private_key.ptr = 0;
        var ptr2 = passStringToWasm0(validator_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        uint64CvtShim[0] = amount;
        const low3 = u32CvtShim[0];
        const high3 = u32CvtShim[1];
        var ptr4 = passStringToWasm0(denom, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len4 = WASM_VECTOR_LEN;
        wasm.get_staking_unbond_signed_tx(retptr, ptr0, ptr1, ptr2, len2, low3, high3, ptr4, len4, with_reward_withdrawal);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        if (r3) {
            throw takeObject(r2);
        }
        var v5 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v5;
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* creates the signed transaction
* for `DistributionSetWithdrawAddress` from the Chainmain distribution module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} withdraw_address
* @returns {Uint8Array}
*/
export function get_distribution_set_withdraw_address_signed_tx(tx_info, private_key, withdraw_address) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(tx_info, CosmosSDKTxInfoRaw);
        var ptr0 = tx_info.ptr;
        tx_info.ptr = 0;
        _assertClass(private_key, PrivateKey);
        var ptr1 = private_key.ptr;
        private_key.ptr = 0;
        var ptr2 = passStringToWasm0(withdraw_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        wasm.get_distribution_set_withdraw_address_signed_tx(retptr, ptr0, ptr1, ptr2, len2);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        if (r3) {
            throw takeObject(r2);
        }
        var v3 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v3;
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* creates the signed transaction
* for `DistributionWithdrawDelegatorReward` from the Chainmain distribution module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} validator_address
* @returns {Uint8Array}
*/
export function get_distribution_withdraw_reward_signed_tx(tx_info, private_key, validator_address) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(tx_info, CosmosSDKTxInfoRaw);
        var ptr0 = tx_info.ptr;
        tx_info.ptr = 0;
        _assertClass(private_key, PrivateKey);
        var ptr1 = private_key.ptr;
        private_key.ptr = 0;
        var ptr2 = passStringToWasm0(validator_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        wasm.get_distribution_withdraw_reward_signed_tx(retptr, ptr0, ptr1, ptr2, len2);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        if (r3) {
            throw takeObject(r2);
        }
        var v3 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v3;
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* creates the signed transaction
* for `IbcTransfer` from the Chainmain ibc module
* wasm-bindgen only supports the C-style enums,
* hences this duplicate function
* @param {CosmosSDKTxInfoRaw} tx_info
* @param {PrivateKey} private_key
* @param {string} receiver
* @param {string} source_port
* @param {string} source_channel
* @param {string} denom
* @param {BigInt} token
* @param {BigInt} revision_height
* @param {BigInt} revision_number
* @param {BigInt} timeout_timestamp
* @returns {Uint8Array}
*/
export function get_ibc_transfer_signed_tx(tx_info, private_key, receiver, source_port, source_channel, denom, token, revision_height, revision_number, timeout_timestamp) {
    try {
        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
        _assertClass(tx_info, CosmosSDKTxInfoRaw);
        var ptr0 = tx_info.ptr;
        tx_info.ptr = 0;
        _assertClass(private_key, PrivateKey);
        var ptr1 = private_key.ptr;
        private_key.ptr = 0;
        var ptr2 = passStringToWasm0(receiver, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(source_port, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ptr4 = passStringToWasm0(source_channel, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len4 = WASM_VECTOR_LEN;
        var ptr5 = passStringToWasm0(denom, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len5 = WASM_VECTOR_LEN;
        uint64CvtShim[0] = token;
        const low6 = u32CvtShim[0];
        const high6 = u32CvtShim[1];
        uint64CvtShim[0] = revision_height;
        const low7 = u32CvtShim[0];
        const high7 = u32CvtShim[1];
        uint64CvtShim[0] = revision_number;
        const low8 = u32CvtShim[0];
        const high8 = u32CvtShim[1];
        uint64CvtShim[0] = timeout_timestamp;
        const low9 = u32CvtShim[0];
        const high9 = u32CvtShim[1];
        wasm.get_ibc_transfer_signed_tx(retptr, ptr0, ptr1, ptr2, len2, ptr3, len3, ptr4, len4, ptr5, len5, low6, high6, low7, high7, low8, high8, low9, high9);
        var r0 = getInt32Memory0()[retptr / 4 + 0];
        var r1 = getInt32Memory0()[retptr / 4 + 1];
        var r2 = getInt32Memory0()[retptr / 4 + 2];
        var r3 = getInt32Memory0()[retptr / 4 + 3];
        if (r3) {
            throw takeObject(r2);
        }
        var v10 = getArrayU8FromWasm0(r0, r1).slice();
        wasm.__wbindgen_free(r0, r1 * 1);
        return v10;
    } finally {
        wasm.__wbindgen_add_to_stack_pointer(16);
    }
}

/**
* retrieves the account details (e.g. sequence and account number) for a given address
* TODO: switch to grpc-web
* @param {string} api_url
* @param {string} address
* @returns {Promise<any>}
*/
export function query_account_details(api_url, address) {
    var ptr0 = passStringToWasm0(api_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ptr1 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len1 = WASM_VECTOR_LEN;
    var ret = wasm.query_account_details(ptr0, len0, ptr1, len1);
    return takeObject(ret);
}

/**
* retrieves the account balance for a given address and a denom
* api-version: https://github.com/cosmos/cosmos-sdk/releases/tag/v0.42.11
* - 0 means before 0.42.11 or 0.44.4
* - >=1 means after 0.42.11 or 0.44.4
* TODO: switch to grpc-web
* @param {string} api_url
* @param {string} address
* @param {string} denom
* @param {number} api_version
* @returns {Promise<any>}
*/
export function query_account_balance(api_url, address, denom, api_version) {
    var ptr0 = passStringToWasm0(api_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ptr1 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len1 = WASM_VECTOR_LEN;
    var ptr2 = passStringToWasm0(denom, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len2 = WASM_VECTOR_LEN;
    var ret = wasm.query_account_balance(ptr0, len0, ptr1, len1, ptr2, len2, api_version);
    return takeObject(ret);
}

/**
* broadcasts a signed cosmos sdk tx
* @param {string} tendermint_rpc_url
* @param {Uint8Array} raw_signed_tx
* @returns {Promise<any>}
*/
export function broadcast_tx(tendermint_rpc_url, raw_signed_tx) {
    var ptr0 = passStringToWasm0(tendermint_rpc_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ptr1 = passArray8ToWasm0(raw_signed_tx, wasm.__wbindgen_malloc);
    var len1 = WASM_VECTOR_LEN;
    var ret = wasm.broadcast_tx(ptr0, len0, ptr1, len1);
    return takeObject(ret);
}

let cachegetUint32Memory0 = null;
function getUint32Memory0() {
    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);
    }
    return cachegetUint32Memory0;
}

function passArrayJsValueToWasm0(array, malloc) {
    const ptr = malloc(array.length * 4);
    const mem = getUint32Memory0();
    for (let i = 0; i < array.length; i++) {
        mem[ptr / 4 + i] = addHeapObject(array[i]);
    }
    WASM_VECTOR_LEN = array.length;
    return ptr;
}
/**
* return the account's balance formatted as ether decimals
* @param {string} web3_api_url
* @param {string} address
* @returns {Promise<any>}
*/
export function query_account_eth_balance(web3_api_url, address) {
    var ptr0 = passStringToWasm0(web3_api_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ptr1 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len1 = WASM_VECTOR_LEN;
    var ret = wasm.query_account_eth_balance(ptr0, len0, ptr1, len1);
    return takeObject(ret);
}

/**
* return the account's token contract balance formatted as hexadecimals
* @param {string} web3_api_url
* @param {string} address
* @param {string} contract_address
* @param {number} contract_type
* @param {string | undefined} token_id
* @returns {Promise<any>}
*/
export function query_account_contract_token_balance(web3_api_url, address, contract_address, contract_type, token_id) {
    var ptr0 = passStringToWasm0(web3_api_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ptr1 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len1 = WASM_VECTOR_LEN;
    var ptr2 = passStringToWasm0(contract_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len2 = WASM_VECTOR_LEN;
    var ptr3 = isLikeNone(token_id) ? 0 : passStringToWasm0(token_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len3 = WASM_VECTOR_LEN;
    var ret = wasm.query_account_contract_token_balance(ptr0, len0, ptr1, len1, ptr2, len2, contract_type, ptr3, len3);
    return takeObject(ret);
}

/**
* construct, sign and broadcast a plain transfer of eth/native token
* @param {string} web3_api_url
* @param {string} to_address_hex
* @param {string} eth_amount_decimal
* @param {BigInt} chain_id
* @param {PrivateKey} private_key
* @returns {Promise<any>}
*/
export function broadcast_transfer_eth(web3_api_url, to_address_hex, eth_amount_decimal, chain_id, private_key) {
    var ptr0 = passStringToWasm0(web3_api_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ptr1 = passStringToWasm0(to_address_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len1 = WASM_VECTOR_LEN;
    var ptr2 = passStringToWasm0(eth_amount_decimal, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len2 = WASM_VECTOR_LEN;
    uint64CvtShim[0] = chain_id;
    const low3 = u32CvtShim[0];
    const high3 = u32CvtShim[1];
    _assertClass(private_key, PrivateKey);
    var ptr4 = private_key.ptr;
    private_key.ptr = 0;
    var ret = wasm.broadcast_transfer_eth(ptr0, len0, ptr1, len1, ptr2, len2, low3, high3, ptr4);
    return takeObject(ret);
}

/**
* construct, sign and broadcast an approval of an ERC20/ERC721/ERC1155 token
* @param {ContractApprovalDetails} details
* @param {string} web3_api_url
* @param {BigInt} chain_id
* @param {PrivateKey} private_key
* @returns {Promise<any>}
*/
export function broadcast_approval_contract(details, web3_api_url, chain_id, private_key) {
    _assertClass(details, ContractApprovalDetails);
    var ptr0 = details.ptr;
    details.ptr = 0;
    var ptr1 = passStringToWasm0(web3_api_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len1 = WASM_VECTOR_LEN;
    uint64CvtShim[0] = chain_id;
    const low2 = u32CvtShim[0];
    const high2 = u32CvtShim[1];
    _assertClass(private_key, PrivateKey);
    var ptr3 = private_key.ptr;
    private_key.ptr = 0;
    var ret = wasm.broadcast_approval_contract(ptr0, ptr1, len1, low2, high2, ptr3);
    return takeObject(ret);
}

/**
* construct, sign and broadcast a transfer of an ERC20/ERC721/ERC1155 token
* @param {ContractTransferDetails} details
* @param {string} web3_api_url
* @param {BigInt} chain_id
* @param {PrivateKey} private_key
* @returns {Promise<any>}
*/
export function broadcast_transfer_contract(details, web3_api_url, chain_id, private_key) {
    _assertClass(details, ContractTransferDetails);
    var ptr0 = details.ptr;
    details.ptr = 0;
    var ptr1 = passStringToWasm0(web3_api_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len1 = WASM_VECTOR_LEN;
    uint64CvtShim[0] = chain_id;
    const low2 = u32CvtShim[0];
    const high2 = u32CvtShim[1];
    _assertClass(private_key, PrivateKey);
    var ptr3 = private_key.ptr;
    private_key.ptr = 0;
    var ret = wasm.broadcast_transfer_contract(ptr0, ptr1, len1, low2, high2, ptr3);
    return takeObject(ret);
}

/**
* construct, sign and broadcast batch-transfer of an ERC1155 token
* @param {ContractBatchTransferDetails} details
* @param {string} web3_api_url
* @param {BigInt} chain_id
* @param {PrivateKey} private_key
* @returns {Promise<any>}
*/
export function broadcast_batch_transfer_contract(details, web3_api_url, chain_id, private_key) {
    _assertClass(details, ContractBatchTransferDetails);
    var ptr0 = details.ptr;
    details.ptr = 0;
    var ptr1 = passStringToWasm0(web3_api_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len1 = WASM_VECTOR_LEN;
    uint64CvtShim[0] = chain_id;
    const low2 = u32CvtShim[0];
    const high2 = u32CvtShim[1];
    _assertClass(private_key, PrivateKey);
    var ptr3 = private_key.ptr;
    private_key.ptr = 0;
    var ret = wasm.broadcast_batch_transfer_contract(ptr0, ptr1, len1, low2, high2, ptr3);
    return takeObject(ret);
}

function handleError(f, args) {
    try {
        return f.apply(this, args);
    } catch (e) {
        wasm.__wbindgen_exn_store(addHeapObject(e));
    }
}
function __wbg_adapter_254(arg0, arg1, arg2, arg3) {
    wasm.wasm_bindgen__convert__closures__invoke2_mut__had01886e76424be0(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));
}

/**
* basic supported coins for wasm
* TODO: re-work with `Network`
* (wasm only supports C-style enums)
*/
export const CoinType = Object.freeze({
/**
* Crypto.org Chain mainnet
*/
CryptoOrgMainnet:0,"0":"CryptoOrgMainnet",
/**
* Crypto.org Chain testnet
*/
CryptoOrgTestnet:1,"1":"CryptoOrgTestnet",
/**
* Cronos mainnet beta
*/
CronosMainnet:2,"2":"CronosMainnet",
/**
* Cosmos Hub mainnet
*/
CosmosHub:3,"3":"CosmosHub",
/**
* Ethereum
*/
Ethereum:4,"4":"Ethereum", });
/**
*/
export const MnemonicWordCount = Object.freeze({
/**
* Word 12
*/
Twelve:0,"0":"Twelve",
/**
* Word 18
*/
Eighteen:1,"1":"Eighteen",
/**
* Word 24
*/
TwentyFour:2,"2":"TwentyFour", });
/**
* the token contract type
*/
export const ContractType = Object.freeze({ Erc20:0,"0":"Erc20",Erc721:1,"1":"Erc721",Erc1155:2,"2":"Erc1155", });
/**
* ethereum contract
*/
export class Contract {

    static __wrap(ptr) {
        const obj = Object.create(Contract.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_contract_free(ptr);
    }
    /**
    * Create a Contract instance.(input abi string)
    * @param {string} data
    */
    constructor(data) {
        var ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.contract_new(ptr0, len0);
        return Contract.__wrap(ret);
    }
    /**
    * set args to function in contract
    * @param {string} function_name
    * @param {any[]} args
    * @returns {Uint8Array}
    */
    encode_input(function_name, args) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passArrayJsValueToWasm0(args, wasm.__wbindgen_malloc);
            var len1 = WASM_VECTOR_LEN;
            wasm.contract_encode_input(retptr, this.ptr, ptr0, len0, ptr1, len1);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var v2 = getArrayU8FromWasm0(r0, r1).slice();
            wasm.__wbindgen_free(r0, r1 * 1);
            return v2;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
/**
* details needed for contract approval transaction
*/
export class ContractApprovalDetails {

    static __wrap(ptr) {
        const obj = Object.create(ContractApprovalDetails.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_contractapprovaldetails_free(ptr);
    }
    /**
    * constructs arguments for ERC-20 function approve
    * @param {string} contract_address
    * @param {string} spender_address
    * @param {string} amount_hex
    * @returns {ContractApprovalDetails}
    */
    static build_erc20_approve(contract_address, spender_address, amount_hex) {
        var ptr0 = passStringToWasm0(contract_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(spender_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(amount_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.contractapprovaldetails_build_erc20_approve(ptr0, len0, ptr1, len1, ptr2, len2);
        return ContractApprovalDetails.__wrap(ret);
    }
    /**
    * constructs arguments for ERC-721 function approve
    * @param {string} contract_address
    * @param {string} approved_address
    * @param {string} token_id
    * @returns {ContractApprovalDetails}
    */
    static build_erc721_approve(contract_address, approved_address, token_id) {
        var ptr0 = passStringToWasm0(contract_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(approved_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(token_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.contractapprovaldetails_build_erc721_approve(ptr0, len0, ptr1, len1, ptr2, len2);
        return ContractApprovalDetails.__wrap(ret);
    }
    /**
    * constructs arguments for ERC-721 function setApprovalForAll
    * @param {string} contract_address
    * @param {string} operator_address
    * @param {boolean} approved
    * @returns {ContractApprovalDetails}
    */
    static build_erc721_set_approval_for_all(contract_address, operator_address, approved) {
        var ptr0 = passStringToWasm0(contract_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(operator_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.contractapprovaldetails_build_erc721_set_approval_for_all(ptr0, len0, ptr1, len1, approved);
        return ContractApprovalDetails.__wrap(ret);
    }
    /**
    * constructs arguments for ERC-1155 function setApprovalForAll
    * @param {string} contract_address
    * @param {string} operator_address
    * @param {boolean} approved
    * @returns {ContractApprovalDetails}
    */
    static build_erc1155_set_approval_for_all(contract_address, operator_address, approved) {
        var ptr0 = passStringToWasm0(contract_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(operator_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.contractapprovaldetails_build_erc1155_set_approval_for_all(ptr0, len0, ptr1, len1, approved);
        return ContractApprovalDetails.__wrap(ret);
    }
}
/**
* details needed for contract batch-transfer transaction
* Fix `amount`, `token_ids` or `additional_data` to optional if any of these
* fields is not necessary for other batch-tranfer functions.
*/
export class ContractBatchTransferDetails {

    static __wrap(ptr) {
        const obj = Object.create(ContractBatchTransferDetails.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_contractbatchtransferdetails_free(ptr);
    }
    /**
    * constructs arguments for ERC-1155 function safeBatchTransferFrom
    * @param {string} contract_address
    * @param {string} from_address
    * @param {string} to_address
    * @param {any[]} token_amounts
    * @param {Uint8Array} additional_data
    * @returns {ContractBatchTransferDetails}
    */
    static build_erc1155_safe_batch_transfer_from(contract_address, from_address, to_address, token_amounts, additional_data) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = passStringToWasm0(contract_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passStringToWasm0(from_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len1 = WASM_VECTOR_LEN;
            var ptr2 = passStringToWasm0(to_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len2 = WASM_VECTOR_LEN;
            var ptr3 = passArrayJsValueToWasm0(token_amounts, wasm.__wbindgen_malloc);
            var len3 = WASM_VECTOR_LEN;
            var ptr4 = passArray8ToWasm0(additional_data, wasm.__wbindgen_malloc);
            var len4 = WASM_VECTOR_LEN;
            wasm.contractbatchtransferdetails_build_erc1155_safe_batch_transfer_from(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return ContractBatchTransferDetails.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
/**
* contract args
*/
export class ContractFunctionArg {

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_contractfunctionarg_free(ptr);
    }
    /**
    * @param {string} address_str
    * @returns {any}
    */
    static build_address(address_str) {
        var ptr0 = passStringToWasm0(address_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.contractfunctionarg_build_address(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {Uint8Array} bytes
    * @returns {any}
    */
    static build_fixed_bytes(bytes) {
        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.contractfunctionarg_build_fixed_bytes(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {Uint8Array} bytes
    * @returns {any}
    */
    static build_bytes(bytes) {
        var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.contractfunctionarg_build_bytes(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string} int_str
    * @returns {any}
    */
    static build_int(int_str) {
        var ptr0 = passStringToWasm0(int_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.contractfunctionarg_build_int(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {string} uint_str
    * @returns {any}
    */
    static build_uint(uint_str) {
        var ptr0 = passStringToWasm0(uint_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.contractfunctionarg_build_uint(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {boolean} val
    * @returns {any}
    */
    static build_bool(val) {
        var ret = wasm.contractfunctionarg_build_bool(val);
        return takeObject(ret);
    }
    /**
    * @param {string} val
    * @returns {any}
    */
    static build_string(val) {
        var ptr0 = passStringToWasm0(val, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.contractfunctionarg_build_string(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {any[]} vec
    * @returns {any}
    */
    static build_fixed_array(vec) {
        var ptr0 = passArrayJsValueToWasm0(vec, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.contractfunctionarg_build_fixed_array(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {any[]} vec
    * @returns {any}
    */
    static build_array(vec) {
        var ptr0 = passArrayJsValueToWasm0(vec, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.contractfunctionarg_build_array(ptr0, len0);
        return takeObject(ret);
    }
    /**
    * @param {any[]} vec
    * @returns {any}
    */
    static build_tuple(vec) {
        var ptr0 = passArrayJsValueToWasm0(vec, wasm.__wbindgen_malloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.contractfunctionarg_build_tuple(ptr0, len0);
        return takeObject(ret);
    }
}
/**
* details needed for contract transfer transaction
*/
export class ContractTransferDetails {

    static __wrap(ptr) {
        const obj = Object.create(ContractTransferDetails.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_contracttransferdetails_free(ptr);
    }
    /**
    * constructs arguments for ERC-20 function transfer
    * @param {string} contract_address
    * @param {string} to_address
    * @param {string} amount_hex
    * @returns {ContractTransferDetails}
    */
    static build_erc20_transfer(contract_address, to_address, amount_hex) {
        var ptr0 = passStringToWasm0(contract_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(to_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(amount_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.contracttransferdetails_build_erc20_transfer(ptr0, len0, ptr1, len1, ptr2, len2);
        return ContractTransferDetails.__wrap(ret);
    }
    /**
    * constructs arguments for ERC-20 function transferFrom
    * @param {string} contract_address
    * @param {string} from_address
    * @param {string} to_address
    * @param {string} amount_hex
    * @returns {ContractTransferDetails}
    */
    static build_erc20_transfer_from(contract_address, from_address, to_address, amount_hex) {
        var ptr0 = passStringToWasm0(contract_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(from_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(to_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(amount_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ret = wasm.contracttransferdetails_build_erc20_transfer_from(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
        return ContractTransferDetails.__wrap(ret);
    }
    /**
    * constructs arguments for ERC-721 function transferFrom
    * @param {string} contract_address
    * @param {string} from_address
    * @param {string} to_address
    * @param {string} token_id
    * @returns {ContractTransferDetails}
    */
    static build_erc721_transfer_from(contract_address, from_address, to_address, token_id) {
        var ptr0 = passStringToWasm0(contract_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(from_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(to_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(token_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ret = wasm.contracttransferdetails_build_erc721_transfer_from(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
        return ContractTransferDetails.__wrap(ret);
    }
    /**
    * constructs arguments for ERC-721 function safeTransferFrom (no additional data)
    * @param {string} contract_address
    * @param {string} from_address
    * @param {string} to_address
    * @param {string} token_id
    * @returns {ContractTransferDetails}
    */
    static build_erc721_safe_transfer_from(contract_address, from_address, to_address, token_id) {
        var ptr0 = passStringToWasm0(contract_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(from_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(to_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(token_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ret = wasm.contracttransferdetails_build_erc721_safe_transfer_from(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);
        return ContractTransferDetails.__wrap(ret);
    }
    /**
    * constructs arguments for ERC-721 function safeTransferFrom with argument additional data
    * @param {string} contract_address
    * @param {string} from_address
    * @param {string} to_address
    * @param {string} token_id
    * @param {Uint8Array} additional_data
    * @returns {ContractTransferDetails}
    */
    static build_erc721_safe_transfer_from_with_additional_data(contract_address, from_address, to_address, token_id, additional_data) {
        var ptr0 = passStringToWasm0(contract_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(from_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(to_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(token_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ptr4 = passArray8ToWasm0(additional_data, wasm.__wbindgen_malloc);
        var len4 = WASM_VECTOR_LEN;
        var ret = wasm.contracttransferdetails_build_erc721_safe_transfer_from_with_additional_data(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);
        return ContractTransferDetails.__wrap(ret);
    }
    /**
    * constructs arguments for ERC-1155 function safeTransferFrom
    * @param {string} contract_address
    * @param {string} from_address
    * @param {string} to_address
    * @param {string} token_id
    * @param {string} amount_hex
    * @param {Uint8Array} additional_data
    * @returns {ContractTransferDetails}
    */
    static build_erc1155_safe_transfer_from(contract_address, from_address, to_address, token_id, amount_hex, additional_data) {
        var ptr0 = passStringToWasm0(contract_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(from_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(to_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(token_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ptr4 = passStringToWasm0(amount_hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len4 = WASM_VECTOR_LEN;
        var ptr5 = passArray8ToWasm0(additional_data, wasm.__wbindgen_malloc);
        var len5 = WASM_VECTOR_LEN;
        var ret = wasm.contracttransferdetails_build_erc1155_safe_transfer_from(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4, ptr5, len5);
        return ContractTransferDetails.__wrap(ret);
    }
}
/**
* Cosmos message wrapper
*/
export class CosmosMsg {

    static __wrap(ptr) {
        const obj = Object.create(CosmosMsg.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_cosmosmsg_free(ptr);
    }
    /**
    * construct BankSend message
    * @param {string} recipient_address
    * @param {BigInt} amount
    * @param {string} denom
    * @returns {CosmosMsg}
    */
    static build_bank_send_msg(recipient_address, amount, denom) {
        var ptr0 = passStringToWasm0(recipient_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        uint64CvtShim[0] = amount;
        const low1 = u32CvtShim[0];
        const high1 = u32CvtShim[1];
        var ptr2 = passStringToWasm0(denom, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.cosmosmsg_build_bank_send_msg(ptr0, len0, low1, high1, ptr2, len2);
        return CosmosMsg.__wrap(ret);
    }
    /**
    * construct NftIssueDenom message
    * @param {string} id
    * @param {string} name
    * @param {string} schema
    * @returns {CosmosMsg}
    */
    static build_nft_issue_denom_msg(id, name, schema) {
        var ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(schema, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.cosmosmsg_build_nft_issue_denom_msg(ptr0, len0, ptr1, len1, ptr2, len2);
        return CosmosMsg.__wrap(ret);
    }
    /**
    * construct NftMint message
    * @param {string} id
    * @param {string} denom_id
    * @param {string} name
    * @param {string} uri
    * @param {string} data
    * @param {string} recipient
    * @returns {CosmosMsg}
    */
    static build_nft_mint_msg(id, denom_id, name, uri, data, recipient) {
        var ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(denom_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(uri, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ptr4 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len4 = WASM_VECTOR_LEN;
        var ptr5 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len5 = WASM_VECTOR_LEN;
        var ret = wasm.cosmosmsg_build_nft_mint_msg(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4, ptr5, len5);
        return CosmosMsg.__wrap(ret);
    }
    /**
    * construct NftEdit message
    * @param {string} id
    * @param {string} denom_id
    * @param {string} name
    * @param {string} uri
    * @param {string} data
    * @returns {CosmosMsg}
    */
    static build_nft_edit_msg(id, denom_id, name, uri, data) {
        var ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(denom_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(uri, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ptr4 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len4 = WASM_VECTOR_LEN;
        var ret = wasm.cosmosmsg_build_nft_edit_msg(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);
        return CosmosMsg.__wrap(ret);
    }
    /**
    * construct NftTransfer message
    * @param {string} id
    * @param {string} denom_id
    * @param {string} recipient
    * @returns {CosmosMsg}
    */
    static build_nft_transfer_msg(id, denom_id, recipient) {
        var ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(denom_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(recipient, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.cosmosmsg_build_nft_transfer_msg(ptr0, len0, ptr1, len1, ptr2, len2);
        return CosmosMsg.__wrap(ret);
    }
    /**
    * construct NftBurn message
    * @param {string} id
    * @param {string} denom_id
    * @returns {CosmosMsg}
    */
    static build_nft_burn_msg(id, denom_id) {
        var ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(denom_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.cosmosmsg_build_nft_burn_msg(ptr0, len0, ptr1, len1);
        return CosmosMsg.__wrap(ret);
    }
    /**
    * construct StakingBeginRedelegate message
    * @param {string} validator_src_address
    * @param {string} validator_dst_address
    * @param {BigInt} amount
    * @param {string} denom
    * @returns {CosmosMsg}
    */
    static build_staking_begin_redelegate_msg(validator_src_address, validator_dst_address, amount, denom) {
        var ptr0 = passStringToWasm0(validator_src_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(validator_dst_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        uint64CvtShim[0] = amount;
        const low2 = u32CvtShim[0];
        const high2 = u32CvtShim[1];
        var ptr3 = passStringToWasm0(denom, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        var ret = wasm.cosmosmsg_build_staking_begin_redelegate_msg(ptr0, len0, ptr1, len1, low2, high2, ptr3, len3);
        return CosmosMsg.__wrap(ret);
    }
    /**
    * construct StakingDelegate message
    * @param {string} validator_address
    * @param {BigInt} amount
    * @param {string} denom
    * @returns {CosmosMsg}
    */
    static build_staking_delegate_msg(validator_address, amount, denom) {
        var ptr0 = passStringToWasm0(validator_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        uint64CvtShim[0] = amount;
        const low1 = u32CvtShim[0];
        const high1 = u32CvtShim[1];
        var ptr2 = passStringToWasm0(denom, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.cosmosmsg_build_staking_delegate_msg(ptr0, len0, low1, high1, ptr2, len2);
        return CosmosMsg.__wrap(ret);
    }
    /**
    * construct StakingUndelegate message
    * @param {string} validator_address
    * @param {BigInt} amount
    * @param {string} denom
    * @returns {CosmosMsg}
    */
    static build_staking_undelegate_msg(validator_address, amount, denom) {
        var ptr0 = passStringToWasm0(validator_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        uint64CvtShim[0] = amount;
        const low1 = u32CvtShim[0];
        const high1 = u32CvtShim[1];
        var ptr2 = passStringToWasm0(denom, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.cosmosmsg_build_staking_undelegate_msg(ptr0, len0, low1, high1, ptr2, len2);
        return CosmosMsg.__wrap(ret);
    }
    /**
    * construct DistributionSetWithdrawAddress message
    * @param {string} withdraw_address
    * @returns {CosmosMsg}
    */
    static build_distribution_set_withdraw_address_msg(withdraw_address) {
        var ptr0 = passStringToWasm0(withdraw_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.cosmosmsg_build_distribution_set_withdraw_address_msg(ptr0, len0);
        return CosmosMsg.__wrap(ret);
    }
    /**
    * construct DistributionWithdrawDelegatorReward message
    * @param {string} validator_address
    * @returns {CosmosMsg}
    */
    static build_distribution_withdraw_delegator_reward_msg(validator_address) {
        var ptr0 = passStringToWasm0(validator_address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.cosmosmsg_build_distribution_withdraw_delegator_reward_msg(ptr0, len0);
        return CosmosMsg.__wrap(ret);
    }
    /**
    * construct IbcTransfer message
    * @param {string} receiver
    * @param {string} source_port
    * @param {string} source_channel
    * @param {string} denom
    * @param {BigInt} token
    * @param {BigInt} revision_height
    * @param {BigInt} revision_number
    * @param {BigInt} timeout_timestamp
    * @returns {CosmosMsg}
    */
    static build_ibc_transfer_msg(receiver, source_port, source_channel, denom, token, revision_height, revision_number, timeout_timestamp) {
        var ptr0 = passStringToWasm0(receiver, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(source_port, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(source_channel, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ptr3 = passStringToWasm0(denom, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len3 = WASM_VECTOR_LEN;
        uint64CvtShim[0] = token;
        const low4 = u32CvtShim[0];
        const high4 = u32CvtShim[1];
        uint64CvtShim[0] = revision_height;
        const low5 = u32CvtShim[0];
        const high5 = u32CvtShim[1];
        uint64CvtShim[0] = revision_number;
        const low6 = u32CvtShim[0];
        const high6 = u32CvtShim[1];
        uint64CvtShim[0] = timeout_timestamp;
        const low7 = u32CvtShim[0];
        const high7 = u32CvtShim[1];
        var ret = wasm.cosmosmsg_build_ibc_transfer_msg(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, low4, high4, low5, high5, low6, high6, low7, high7);
        return CosmosMsg.__wrap(ret);
    }
}
/**
* the common transaction data needed for Cosmos SDK transactions
* (raw duplicate needed for Wasm -- TODO: unify common structures?)
*/
export class CosmosSDKTxInfoRaw {

    static __wrap(ptr) {
        const obj = Object.create(CosmosSDKTxInfoRaw.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_cosmossdktxinforaw_free(ptr);
    }
    /**
    * global account number of the sender
    */
    get account_number() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.__wbg_get_cosmossdktxinforaw_account_number(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            u32CvtShim[0] = r0;
            u32CvtShim[1] = r1;
            const n0 = uint64CvtShim[0];
            return n0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * global account number of the sender
    * @param {BigInt} arg0
    */
    set account_number(arg0) {
        uint64CvtShim[0] = arg0;
        const low0 = u32CvtShim[0];
        const high0 = u32CvtShim[1];
        wasm.__wbg_set_cosmossdktxinforaw_account_number(this.ptr, low0, high0);
    }
    /**
    * equivalent of "account nonce"
    */
    get sequence_number() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.__wbg_get_cosmossdktxinforaw_sequence_number(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            u32CvtShim[0] = r0;
            u32CvtShim[1] = r1;
            const n0 = uint64CvtShim[0];
            return n0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * equivalent of "account nonce"
    * @param {BigInt} arg0
    */
    set sequence_number(arg0) {
        uint64CvtShim[0] = arg0;
        const low0 = u32CvtShim[0];
        const high0 = u32CvtShim[1];
        wasm.__wbg_set_cosmossdktxinforaw_sequence_number(this.ptr, low0, high0);
    }
    /**
    * the maximum gas limit
    */
    get gas_limit() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.__wbg_get_cosmossdktxinforaw_gas_limit(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            u32CvtShim[0] = r0;
            u32CvtShim[1] = r1;
            const n0 = uint64CvtShim[0];
            return n0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * the maximum gas limit
    * @param {BigInt} arg0
    */
    set gas_limit(arg0) {
        uint64CvtShim[0] = arg0;
        const low0 = u32CvtShim[0];
        const high0 = u32CvtShim[1];
        wasm.__wbg_set_cosmossdktxinforaw_gas_limit(this.ptr, low0, high0);
    }
    /**
    * the amount fee to be paid (gas_limit * gas_price)
    */
    get fee_amount() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.__wbg_get_cosmossdktxinforaw_fee_amount(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            u32CvtShim[0] = r0;
            u32CvtShim[1] = r1;
            const n0 = uint64CvtShim[0];
            return n0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * the amount fee to be paid (gas_limit * gas_price)
    * @param {BigInt} arg0
    */
    set fee_amount(arg0) {
        uint64CvtShim[0] = arg0;
        const low0 = u32CvtShim[0];
        const high0 = u32CvtShim[1];
        wasm.__wbg_set_cosmossdktxinforaw_fee_amount(this.ptr, low0, high0);
    }
    /**
    * the fee's denomination
    */
    get fee_denom() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.__wbg_get_cosmossdktxinforaw_fee_denom(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * the fee's denomination
    * @param {string} arg0
    */
    set fee_denom(arg0) {
        var ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_cosmossdktxinforaw_fee_denom(this.ptr, ptr0, len0);
    }
    /**
    * transaction timeout
    */
    get timeout_height() {
        var ret = wasm.__wbg_get_cosmossdktxinforaw_timeout_height(this.ptr);
        return ret >>> 0;
    }
    /**
    * transaction timeout
    * @param {number} arg0
    */
    set timeout_height(arg0) {
        wasm.__wbg_set_cosmossdktxinforaw_timeout_height(this.ptr, arg0);
    }
    /**
    * optional memo
    */
    get memo_note() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.__wbg_get_cosmossdktxinforaw_memo_note(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            let v0;
            if (r0 !== 0) {
                v0 = getStringFromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 1);
            }
            return v0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * optional memo
    * @param {string | undefined} arg0
    */
    set memo_note(arg0) {
        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_cosmossdktxinforaw_memo_note(this.ptr, ptr0, len0);
    }
    /**
    * the network chain id
    */
    get chain_id() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.__wbg_get_cosmossdktxinforaw_chain_id(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * the network chain id
    * @param {string} arg0
    */
    set chain_id(arg0) {
        var ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_cosmossdktxinforaw_chain_id(this.ptr, ptr0, len0);
    }
    /**
    * bech32 human readable prefix
    */
    get bech32hrp() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.__wbg_get_cosmossdktxinforaw_bech32hrp(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * bech32 human readable prefix
    * @param {string} arg0
    */
    set bech32hrp(arg0) {
        var ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        wasm.__wbg_set_cosmossdktxinforaw_bech32hrp(this.ptr, ptr0, len0);
    }
    /**
    * the coin type to use
    */
    get coin_type() {
        var ret = wasm.__wbg_get_cosmossdktxinforaw_coin_type(this.ptr);
        return ret >>> 0;
    }
    /**
    * the coin type to use
    * @param {number} arg0
    */
    set coin_type(arg0) {
        wasm.__wbg_set_cosmossdktxinforaw_coin_type(this.ptr, arg0);
    }
    /**
    * constructor for JS -- TODO: some builder API wrapper?
    * @param {BigInt} account_number
    * @param {BigInt} sequence_number
    * @param {BigInt} gas_limit
    * @param {BigInt} fee_amount
    * @param {string} fee_denom
    * @param {number} timeout_height
    * @param {string | undefined} memo_note
    * @param {string} chain_id
    * @param {string} bech32hrp
    * @param {number} coin_type
    */
    constructor(account_number, sequence_number, gas_limit, fee_amount, fee_denom, timeout_height, memo_note, chain_id, bech32hrp, coin_type) {
        uint64CvtShim[0] = account_number;
        const low0 = u32CvtShim[0];
        const high0 = u32CvtShim[1];
        uint64CvtShim[0] = sequence_number;
        const low1 = u32CvtShim[0];
        const high1 = u32CvtShim[1];
        uint64CvtShim[0] = gas_limit;
        const low2 = u32CvtShim[0];
        const high2 = u32CvtShim[1];
        uint64CvtShim[0] = fee_amount;
        const low3 = u32CvtShim[0];
        const high3 = u32CvtShim[1];
        var ptr4 = passStringToWasm0(fee_denom, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len4 = WASM_VECTOR_LEN;
        var ptr5 = isLikeNone(memo_note) ? 0 : passStringToWasm0(memo_note, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len5 = WASM_VECTOR_LEN;
        var ptr6 = passStringToWasm0(chain_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len6 = WASM_VECTOR_LEN;
        var ptr7 = passStringToWasm0(bech32hrp, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len7 = WASM_VECTOR_LEN;
        var ret = wasm.cosmossdktxinforaw_new(low0, high0, low1, high1, low2, high2, low3, high3, ptr4, len4, timeout_height, ptr5, len5, ptr6, len6, ptr7, len7, coin_type);
        return CosmosSDKTxInfoRaw.__wrap(ret);
    }
}
/**
* Cosmos transaction
*/
export class CosmosTx {

    static __wrap(ptr) {
        const obj = Object.create(CosmosTx.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_cosmostx_free(ptr);
    }
    /**
    * Create a Cosmos transaction
    */
    constructor() {
        var ret = wasm.cosmostx_new();
        return CosmosTx.__wrap(ret);
    }
    /**
    * Add a Cosmos message to transaction
    * @param {CosmosMsg} msg
    */
    add_msg(msg) {
        _assertClass(msg, CosmosMsg);
        var ptr0 = msg.ptr;
        msg.ptr = 0;
        wasm.cosmostx_add_msg(this.ptr, ptr0);
    }
    /**
    * Get the count of pending messages
    * @returns {number}
    */
    get_msg_count() {
        var ret = wasm.cosmostx_get_msg_count(this.ptr);
        return ret >>> 0;
    }
    /**
    * Sign the transaction and move out all pending messages
    * will release the function parameter object
    * @param {PrivateKey} private_key
    * @param {CosmosSDKTxInfoRaw} tx_info
    * @returns {Uint8Array}
    */
    sign_into(private_key, tx_info) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            _assertClass(private_key, PrivateKey);
            var ptr0 = private_key.ptr;
            private_key.ptr = 0;
            _assertClass(tx_info, CosmosSDKTxInfoRaw);
            var ptr1 = tx_info.ptr;
            tx_info.ptr = 0;
            wasm.cosmostx_sign_into(retptr, this.ptr, ptr0, ptr1);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            var r3 = getInt32Memory0()[retptr / 4 + 3];
            if (r3) {
                throw takeObject(r2);
            }
            var v2 = getArrayU8FromWasm0(r0, r1).slice();
            wasm.__wbindgen_free(r0, r1 * 1);
            return v2;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
/**
* Grpc Web Client wrapper for Wasm
*/
export class GrpcWebClient {

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_grpcwebclient_free(ptr);
    }
}
/**
*/
export class IntoUnderlyingByteSource {

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_intounderlyingbytesource_free(ptr);
    }
    /**
    * @returns {any}
    */
    get type() {
        var ret = wasm.intounderlyingbytesource_type(this.ptr);
        return takeObject(ret);
    }
    /**
    * @returns {number}
    */
    get autoAllocateChunkSize() {
        var ret = wasm.intounderlyingbytesource_autoAllocateChunkSize(this.ptr);
        return ret >>> 0;
    }
    /**
    * @param {any} controller
    */
    start(controller) {
        wasm.intounderlyingbytesource_start(this.ptr, addHeapObject(controller));
    }
    /**
    * @param {any} controller
    * @returns {Promise<any>}
    */
    pull(controller) {
        var ret = wasm.intounderlyingbytesource_pull(this.ptr, addHeapObject(controller));
        return takeObject(ret);
    }
    /**
    */
    cancel() {
        const ptr = this.__destroy_into_raw();
        wasm.intounderlyingbytesource_cancel(ptr);
    }
}
/**
*/
export class IntoUnderlyingSink {

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_intounderlyingsink_free(ptr);
    }
    /**
    * @param {any} chunk
    * @returns {Promise<any>}
    */
    write(chunk) {
        var ret = wasm.intounderlyingsink_write(this.ptr, addHeapObject(chunk));
        return takeObject(ret);
    }
    /**
    * @returns {Promise<any>}
    */
    close() {
        const ptr = this.__destroy_into_raw();
        var ret = wasm.intounderlyingsink_close(ptr);
        return takeObject(ret);
    }
    /**
    * @param {any} reason
    * @returns {Promise<any>}
    */
    abort(reason) {
        const ptr = this.__destroy_into_raw();
        var ret = wasm.intounderlyingsink_abort(ptr, addHeapObject(reason));
        return takeObject(ret);
    }
}
/**
*/
export class IntoUnderlyingSource {

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_intounderlyingsource_free(ptr);
    }
    /**
    * @param {any} controller
    * @returns {Promise<any>}
    */
    pull(controller) {
        var ret = wasm.intounderlyingsource_pull(this.ptr, addHeapObject(controller));
        return takeObject(ret);
    }
    /**
    */
    cancel() {
        const ptr = this.__destroy_into_raw();
        wasm.intounderlyingsource_cancel(ptr);
    }
}
/**
* Raw options for [`pipeTo()`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/pipeTo).
*/
export class PipeOptions {

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_pipeoptions_free(ptr);
    }
    /**
    * @returns {boolean}
    */
    get preventClose() {
        var ret = wasm.pipeoptions_preventClose(this.ptr);
        return ret !== 0;
    }
    /**
    * @returns {boolean}
    */
    get preventCancel() {
        var ret = wasm.pipeoptions_preventCancel(this.ptr);
        return ret !== 0;
    }
    /**
    * @returns {boolean}
    */
    get preventAbort() {
        var ret = wasm.pipeoptions_preventAbort(this.ptr);
        return ret !== 0;
    }
    /**
    * @returns {AbortSignal | undefined}
    */
    get signal() {
        var ret = wasm.pipeoptions_signal(this.ptr);
        return takeObject(ret);
    }
}
/**
* Signing key wrapper for Wasm
*/
export class PrivateKey {

    static __wrap(ptr) {
        const obj = Object.create(PrivateKey.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_privatekey_free(ptr);
    }
    /**
    * generates a random private key
    */
    constructor() {
        var ret = wasm.privatekey_new();
        return PrivateKey.__wrap(ret);
    }
    /**
    * constructs private key from bytes
    * @param {Uint8Array} bytes
    * @returns {PrivateKey}
    */
    static from_bytes(bytes) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);
            var len0 = WASM_VECTOR_LEN;
            wasm.privatekey_from_bytes(retptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return PrivateKey.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * constructs private key from hex
    * @param {string} hex
    * @returns {PrivateKey}
    */
    static from_hex(hex) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = passStringToWasm0(hex, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            wasm.privatekey_from_hex(retptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return PrivateKey.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * gets public key to byte array
    * @returns {Uint8Array}
    */
    get_public_key_bytes() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privatekey_get_public_key_bytes(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var v0 = getArrayU8FromWasm0(r0, r1).slice();
            wasm.__wbindgen_free(r0, r1 * 1);
            return v0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * gets public key to a hex string without the 0x prefix
    * @returns {string}
    */
    get_public_key_hex() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privatekey_get_public_key_hex(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * converts private key to byte array
    * @returns {Uint8Array}
    */
    to_bytes() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privatekey_to_bytes(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var v0 = getArrayU8FromWasm0(r0, r1).slice();
            wasm.__wbindgen_free(r0, r1 * 1);
            return v0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * converts private key to a hex string without the 0x prefix
    * @returns {string}
    */
    to_hex() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privatekey_to_hex(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * converts private to address with coin type
    * @param {number} coin
    * @returns {string}
    */
    to_address(coin) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.privatekey_to_address(retptr, this.ptr, coin);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            var r3 = getInt32Memory0()[retptr / 4 + 3];
            var ptr0 = r0;
            var len0 = r1;
            if (r3) {
                ptr0 = 0; len0 = 0;
                throw takeObject(r2);
            }
            return getStringFromWasm0(ptr0, len0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(ptr0, len0);
        }
    }
}
/**
*/
export class QueuingStrategy {

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_queuingstrategy_free(ptr);
    }
    /**
    * @returns {number}
    */
    get highWaterMark() {
        var ret = wasm.queuingstrategy_highWaterMark(this.ptr);
        return ret;
    }
}
/**
* Raw options for [`getReader()`](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/getReader).
*/
export class ReadableStreamGetReaderOptions {

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_readablestreamgetreaderoptions_free(ptr);
    }
    /**
    * @returns {any}
    */
    get mode() {
        var ret = wasm.readablestreamgetreaderoptions_mode(this.ptr);
        return takeObject(ret);
    }
}
/**
* Token ID and amount of hex value pair used for ERC-1155 function
* safeBatchTransferFrom which needs the same length of both Token ID and
* amount arrays.
*/
export class TokenAmount {

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_tokenamount_free(ptr);
    }
    /**
    * Create an instance and serialize it to JsValue.
    * @param {string} token_id
    * @param {string} hex_amount
    */
    constructor(token_id, hex_amount) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = passStringToWasm0(token_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = passStringToWasm0(hex_amount, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len1 = WASM_VECTOR_LEN;
            wasm.tokenamount_new(retptr, ptr0, len0, ptr1, len1);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return takeObject(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}
/**
* HD Wallet wrapper for Wasm
*/
export class Wallet {

    static __wrap(ptr) {
        const obj = Object.create(Wallet.prototype);
        obj.ptr = ptr;

        return obj;
    }

    __destroy_into_raw() {
        const ptr = this.ptr;
        this.ptr = 0;

        return ptr;
    }

    free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_wallet_free(ptr);
    }
    /**
    * generate a random wallet (with an optional password)
    * @param {string | undefined} password
    * @param {number | undefined} word_count
    */
    constructor(password, word_count) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = isLikeNone(password) ? 0 : passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            wasm.wallet_new(retptr, ptr0, len0, isLikeNone(word_count) ? 3 : word_count);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return Wallet.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * recovers/imports HD wallet from a BIP39 backup phrase (English words) and an optional password
    * @param {string} mnemonic_phase
    * @param {string | undefined} password
    * @returns {Wallet}
    */
    static recover_wallet(mnemonic_phase, password) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = passStringToWasm0(mnemonic_phase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            var ptr1 = isLikeNone(password) ? 0 : passStringToWasm0(password, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len1 = WASM_VECTOR_LEN;
            wasm.wallet_recover_wallet(retptr, ptr0, len0, ptr1, len1);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return Wallet.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * return the default address for a given coin type
    * @param {number} coin
    * @returns {string}
    */
    get_default_address(coin) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.wallet_get_default_address(retptr, this.ptr, coin);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            var r3 = getInt32Memory0()[retptr / 4 + 3];
            var ptr0 = r0;
            var len0 = r1;
            if (r3) {
                ptr0 = 0; len0 = 0;
                throw takeObject(r2);
            }
            return getStringFromWasm0(ptr0, len0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(ptr0, len0);
        }
    }
    /**
    * return the address for a given coin type and index
    * @param {number} coin
    * @param {number} index
    * @returns {string}
    */
    get_address(coin, index) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.wallet_get_address(retptr, this.ptr, coin, index);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            var r3 = getInt32Memory0()[retptr / 4 + 3];
            var ptr0 = r0;
            var len0 = r1;
            if (r3) {
                ptr0 = 0; len0 = 0;
                throw takeObject(r2);
            }
            return getStringFromWasm0(ptr0, len0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
            wasm.__wbindgen_free(ptr0, len0);
        }
    }
    /**
    * obtain a signing key for a given derivation path
    * derivation_path is bip44 key path
    * @param {string} derivation_path
    * @returns {PrivateKey}
    */
    get_key(derivation_path) {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            var ptr0 = passStringToWasm0(derivation_path, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
            var len0 = WASM_VECTOR_LEN;
            wasm.wallet_get_key(retptr, this.ptr, ptr0, len0);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            var r2 = getInt32Memory0()[retptr / 4 + 2];
            if (r2) {
                throw takeObject(r1);
            }
            return PrivateKey.__wrap(r0);
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
    /**
    * Get the mnemonic for the wallet
    * @returns {string | undefined}
    */
    get_backup_mnemonic_phrase() {
        try {
            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
            wasm.wallet_get_backup_mnemonic_phrase(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            let v0;
            if (r0 !== 0) {
                v0 = getStringFromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 1);
            }
            return v0;
        } finally {
            wasm.__wbindgen_add_to_stack_pointer(16);
        }
    }
}

async function load(module, imports) {
    if (typeof Response === 'function' && module instanceof Response) {
        if (typeof WebAssembly.instantiateStreaming === 'function') {
            try {
                return await WebAssembly.instantiateStreaming(module, imports);

            } catch (e) {
                if (module.headers.get('Content-Type') != 'application/wasm') {
                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);

                } else {
                    throw e;
                }
            }
        }

        const bytes = await module.arrayBuffer();
        return await WebAssembly.instantiate(bytes, imports);

    } else {
        const instance = await WebAssembly.instantiate(module, imports);

        if (instance instanceof WebAssembly.Instance) {
            return { instance, module };

        } else {
            return instance;
        }
    }
}

async function init(input) {
    if (typeof input === 'undefined') {
        input = new URL('defi_wallet_core_wasm_bg.wasm', import.meta.url);
    }
    const imports = {};
    imports.wbg = {};
    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {
        takeObject(arg0);
    };
    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
        var ret = getStringFromWasm0(arg0, arg1);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {
        const obj = getObject(arg1);
        var ret = typeof(obj) === 'string' ? obj : undefined;
        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len0;
        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbindgen_json_parse = function(arg0, arg1) {
        var ret = JSON.parse(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_json_serialize = function(arg0, arg1) {
        const obj = getObject(arg1);
        var ret = JSON.stringify(obj === undefined ? null : obj);
        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len0;
        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbg_new_3a746f2619705add = function(arg0, arg1) {
        var ret = new Function(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_call_f54d3a6dadb199ca = function(arg0, arg1) {
        var ret = getObject(arg0).call(getObject(arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_jsval_eq = function(arg0, arg1) {
        var ret = getObject(arg0) === getObject(arg1);
        return ret;
    };
    imports.wbg.__wbg_self_ac379e780a0d8b94 = function(arg0) {
        var ret = getObject(arg0).self;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_crypto_1e4302b85d4f64a2 = function(arg0) {
        var ret = getObject(arg0).crypto;
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_is_undefined = function(arg0) {
        var ret = getObject(arg0) === undefined;
        return ret;
    };
    imports.wbg.__wbg_getRandomValues_1b4ba144162a5c9e = function(arg0) {
        var ret = getObject(arg0).getRandomValues;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_require_6461b1e9a0d7c34a = function(arg0, arg1) {
        var ret = require(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_randomFillSync_1b52c8482374c55b = function(arg0, arg1, arg2) {
        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));
    };
    imports.wbg.__wbg_getRandomValues_1ef11e888e5228e9 = function(arg0, arg1, arg2) {
        getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));
    };
    imports.wbg.__wbg_close_22a285b060f5f873 = function(arg0) {
        getObject(arg0).close();
    };
    imports.wbg.__wbg_enqueue_7b983d315f84999d = function(arg0, arg1) {
        getObject(arg0).enqueue(getObject(arg1));
    };
    imports.wbg.__wbg_byobRequest_f6341fff5655cedc = function(arg0) {
        var ret = getObject(arg0).byobRequest;
        return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_close_1e7d15218d3841b0 = function(arg0) {
        getObject(arg0).close();
    };
    imports.wbg.__wbg_view_c4f26d2fe459fbbe = function(arg0) {
        var ret = getObject(arg0).view;
        return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_respond_3de33521af0cc48d = function(arg0, arg1) {
        getObject(arg0).respond(arg1 >>> 0);
    };
    imports.wbg.__wbg_buffer_91f3eb8fd33df09f = function(arg0) {
        var ret = getObject(arg0).buffer;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_byteOffset_8b38bb7a6db8fca5 = function(arg0) {
        var ret = getObject(arg0).byteOffset;
        return ret;
    };
    imports.wbg.__wbg_byteLength_1660d1ca53a8dc1d = function(arg0) {
        var ret = getObject(arg0).byteLength;
        return ret;
    };
    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {
        var ret = getObject(arg0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_bytesliteral_94cbaf79adf81aa1 = function() {
        var ret = bytes_literal();
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_cb_drop = function(arg0) {
        const obj = takeObject(arg0).original;
        if (obj.cnt-- == 1) {
            obj.a = 0;
            return true;
        }
        var ret = false;
        return ret;
    };
    imports.wbg.__wbg_fetch_811d43d6bdcad5b1 = function(arg0) {
        var ret = fetch(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_instanceof_Window_434ce1849eb4e0fc = function(arg0) {
        var ret = getObject(arg0) instanceof Window;
        return ret;
    };
    imports.wbg.__wbg_performance_bbca4ccfaef860b2 = function(arg0) {
        var ret = getObject(arg0).performance;
        return isLikeNone(ret) ? 0 : addHeapObject(ret);
    };
    imports.wbg.__wbg_setTimeout_1c75092906446b91 = function() { return handleError(function (arg0, arg1, arg2) {
        var ret = getObject(arg0).setTimeout(getObject(arg1), arg2);
        return ret;
    }, arguments) };
    imports.wbg.__wbg_fetch_fe54824ee845f6b4 = function(arg0, arg1) {
        var ret = getObject(arg0).fetch(getObject(arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_instanceof_Response_ea36d565358a42f7 = function(arg0) {
        var ret = getObject(arg0) instanceof Response;
        return ret;
    };
    imports.wbg.__wbg_url_6e564c9e212456f8 = function(arg0, arg1) {
        var ret = getObject(arg1).url;
        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len0;
        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbg_status_3a55bb50e744b834 = function(arg0) {
        var ret = getObject(arg0).status;
        return ret;
    };
    imports.wbg.__wbg_headers_e4204c6775f7b3b4 = function(arg0) {
        var ret = getObject(arg0).headers;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_arrayBuffer_0e2a43f68a8b3e49 = function() { return handleError(function (arg0) {
        var ret = getObject(arg0).arrayBuffer();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_text_aeba5a5bbfef7f15 = function() { return handleError(function (arg0) {
        var ret = getObject(arg0).text();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_new_226d109446575877 = function() { return handleError(function () {
        var ret = new Headers();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_append_4d85f35672cbffa7 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {
        getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));
    }, arguments) };
    imports.wbg.__wbg_newwithstrandinit_c07f0662ece15bc6 = function() { return handleError(function (arg0, arg1, arg2) {
        var ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_now_5fa0ca001e042f8a = function(arg0) {
        var ret = getObject(arg0).now();
        return ret;
    };
    imports.wbg.__wbg_getRandomValues_99bbe8a65f4aef87 = function() { return handleError(function (arg0, arg1) {
        getObject(arg0).getRandomValues(getObject(arg1));
    }, arguments) };
    imports.wbg.__wbg_randomFillSync_378e02b85af41ab6 = function() { return handleError(function (arg0, arg1, arg2) {
        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));
    }, arguments) };
    imports.wbg.__wbg_static_accessor_NODE_MODULE_bdc5ca9096c68aeb = function() {
        var ret = module;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_process_5729605ce9d34ea8 = function(arg0) {
        var ret = getObject(arg0).process;
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_is_object = function(arg0) {
        const val = getObject(arg0);
        var ret = typeof(val) === 'object' && val !== null;
        return ret;
    };
    imports.wbg.__wbg_versions_531e16e1a776ee97 = function(arg0) {
        var ret = getObject(arg0).versions;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_node_18b58a160b60d170 = function(arg0) {
        var ret = getObject(arg0).node;
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_is_string = function(arg0) {
        var ret = typeof(getObject(arg0)) === 'string';
        return ret;
    };
    imports.wbg.__wbg_require_edfaedd93e302925 = function() { return handleError(function (arg0, arg1, arg2) {
        var ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_crypto_2bc4d5b05161de5b = function(arg0) {
        var ret = getObject(arg0).crypto;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_msCrypto_d003eebe62c636a9 = function(arg0) {
        var ret = getObject(arg0).msCrypto;
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_is_function = function(arg0) {
        var ret = typeof(getObject(arg0)) === 'function';
        return ret;
    };
    imports.wbg.__wbg_newnoargs_f579424187aa1717 = function(arg0, arg1) {
        var ret = new Function(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_next_c7a2a6b012059a5e = function(arg0) {
        var ret = getObject(arg0).next;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_next_dd1a890d37e38d73 = function() { return handleError(function (arg0) {
        var ret = getObject(arg0).next();
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_done_982b1c7ac0cbc69d = function(arg0) {
        var ret = getObject(arg0).done;
        return ret;
    };
    imports.wbg.__wbg_value_2def2d1fb38b02cd = function(arg0) {
        var ret = getObject(arg0).value;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_iterator_4b9cedbeda0c0e30 = function() {
        var ret = Symbol.iterator;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_get_8bbb82393651dd9c = function() { return handleError(function (arg0, arg1) {
        var ret = Reflect.get(getObject(arg0), getObject(arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_call_89558c3e96703ca1 = function() { return handleError(function (arg0, arg1) {
        var ret = getObject(arg0).call(getObject(arg1));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_new_d3138911a89329b0 = function() {
        var ret = new Object();
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_55259b13834a484c = function(arg0, arg1) {
        var ret = new Error(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_call_94697a95cb7e239c = function() { return handleError(function (arg0, arg1, arg2) {
        var ret = getObject(arg0).call(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_new_4beacc9c71572250 = function(arg0, arg1) {
        try {
            var state0 = {a: arg0, b: arg1};
            var cb0 = (arg0, arg1) => {
                const a = state0.a;
                state0.a = 0;
                try {
                    return __wbg_adapter_254(a, state0.b, arg0, arg1);
                } finally {
                    state0.a = a;
                }
            };
            var ret = new Promise(cb0);
            return addHeapObject(ret);
        } finally {
            state0.a = state0.b = 0;
        }
    };
    imports.wbg.__wbg_resolve_4f8f547f26b30b27 = function(arg0) {
        var ret = Promise.resolve(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_then_a6860c82b90816ca = function(arg0, arg1) {
        var ret = getObject(arg0).then(getObject(arg1));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_then_58a04e42527f52c6 = function(arg0, arg1, arg2) {
        var ret = getObject(arg0).then(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_self_e23d74ae45fb17d1 = function() { return handleError(function () {
        var ret = self.self;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_window_b4be7f48b24ac56e = function() { return handleError(function () {
        var ret = window.window;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_globalThis_d61b1f48a57191ae = function() { return handleError(function () {
        var ret = globalThis.globalThis;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_global_e7669da72fd7f239 = function() { return handleError(function () {
        var ret = global.global;
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbg_buffer_5e74a88a1424a2e0 = function(arg0) {
        var ret = getObject(arg0).buffer;
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_newwithbyteoffsetandlength_278ec7532799393a = function(arg0, arg1, arg2) {
        var ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_new_e3b800e570795b3c = function(arg0) {
        var ret = new Uint8Array(getObject(arg0));
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_set_5b8081e9d002f0df = function(arg0, arg1, arg2) {
        getObject(arg0).set(getObject(arg1), arg2 >>> 0);
    };
    imports.wbg.__wbg_length_30803400a8f15c59 = function(arg0) {
        var ret = getObject(arg0).length;
        return ret;
    };
    imports.wbg.__wbg_newwithlength_5f4ce114a24dfe1e = function(arg0) {
        var ret = new Uint8Array(arg0 >>> 0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_subarray_a68f835ca2af506f = function(arg0, arg1, arg2) {
        var ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);
        return addHeapObject(ret);
    };
    imports.wbg.__wbg_has_3850edde6df9191b = function() { return handleError(function (arg0, arg1) {
        var ret = Reflect.has(getObject(arg0), getObject(arg1));
        return ret;
    }, arguments) };
    imports.wbg.__wbg_set_c42875065132a932 = function() { return handleError(function (arg0, arg1, arg2) {
        var ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));
        return ret;
    }, arguments) };
    imports.wbg.__wbg_stringify_f8bfc9e2d1e8b6a0 = function() { return handleError(function (arg0) {
        var ret = JSON.stringify(getObject(arg0));
        return addHeapObject(ret);
    }, arguments) };
    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {
        var ret = debugString(getObject(arg1));
        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len0;
        getInt32Memory0()[arg0 / 4 + 0] = ptr0;
    };
    imports.wbg.__wbindgen_throw = function(arg0, arg1) {
        throw new Error(getStringFromWasm0(arg0, arg1));
    };
    imports.wbg.__wbindgen_memory = function() {
        var ret = wasm.memory;
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper4713 = function(arg0, arg1, arg2) {
        var ret = makeMutClosure(arg0, arg1, 1325, __wbg_adapter_32);
        return addHeapObject(ret);
    };
    imports.wbg.__wbindgen_closure_wrapper4974 = function(arg0, arg1, arg2) {
        var ret = makeMutClosure(arg0, arg1, 1433, __wbg_adapter_35);
        return addHeapObject(ret);
    };

    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
        input = fetch(input);
    }



    const { instance, module } = await load(await input, imports);

    wasm = instance.exports;
    init.__wbindgen_wasm_module = module;

    return wasm;
}

export default init;

